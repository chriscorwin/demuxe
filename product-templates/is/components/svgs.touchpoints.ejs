<div style="display: flex; justify-content: flex-end; width: 900px;">
	<%- include('components/combobox', {
		isDisabled: false, // whether the combobox appears disabled
		id: 'touchpointsSelection',
		versionName: 'Touchpoints', // placeholder text for combobox
		versions: [
			{
				name: 'Lifecycle', // displayed text for option
				onclick: "navigatePage('/lifecycles')"
			},
			{
				name: 'Channels',
				onclick: "navigatePage('/touchpoints')"
			},
			{
				name: 'Touchpoints', // displayed text for option
				onclick: "navigatePage('/touchpoints')"
			}
		]
	}) %>
	<div style="margin-left: 10px;">
		<img src="/images/lifecycles.top-left.svg" />
	</div>
</div>
<div>
	<%
	const svgHeight = locals.svgHeight || 100;
	const svgWidth = locals.svgWidth || 1280;
	const zoomLevel = locals.zoomLevel || 1;
	const labelScaleStops = {
		1: '490px, 167px'
	}

	const STOP_SPACING = locals.STOP_SPACING || 140;
	const stops = (i) => STOP_SPACING/2 + (i * STOP_SPACING);

	const stages = locals.stages || [{}, {}, {}, {}, {}, {}];
	%>
<div class="lifecycle-label-container dynamic-placement" style="transform-origin: center; transform: scale(<%= zoomLevel %>, <%= zoomLevel %>)">
	<div class="lifecycle-stage-labels" style="transform-origin: top left; transform: translate(<%= labelScaleStops[zoomLevel] %>) ">
		<%
			stages.forEach((stage, i) => {
				echo(`
					<div class="journeys-label-container lifecycle-stage-label-container dynamic-placement is-single-column" style="opacity: 1; transform: translateX(${stops(i)}px) translateX(-50%)">
						<label class="journeys-label lifecycle-stage-label">
							<span class="journeys-label-content lifecycle-stage-label-content">${stage.label}</span>
						</label>
					</div>
				`);
			});
		%>
	</div>
	<div class="node-labels"> </div>
</div>
<svg class="graph lifecycle-graph" height="<%= svgHeight %>" width="<%= svgWidth %>" transform="scale(<%= zoomLevel %> <%= zoomLevel %>)" style="transform-origin: top left;">
	<defs>
		<linearGradient id="gradient-axis" class="linear-gradient" x1="1%" x2="99%" y1="0%" y2="0%" spreadMethod="pad">
			<stop offset="0%" class="linear-gradient-stop-axis" stop-opacity="0"/>
			<stop offset="4%" class="linear-gradient-stop-axis" stop-opacity="1"/>
			<stop offset="96%" class="linear-gradient-stop-axis" stop-opacity="1"/>
			<stop offset="100%" class="linear-gradient-stop-axis" stop-opacity="0"/>
		</linearGradient>
	</defs>
	<g class="graph-data" transform="translate(84,60)">

		<!-- The center line -->
		<g class="graph-marks">
			<rect class="axis" width="920" fill="url(#gradient-axis)" x="0" y="-1" height="2"> </rect>
			<line class="separator separator-row separator-graph" x1="0" y1="0" x2="100%" y2="0"> </line>
		</g>

		<g class="graph-elements-svg" transform="translate(56,0)">
			<!-- the circles on the lines -->
			<g class="node-container">
				<%
					stages.forEach((stage, i) => {
						echo(`<g opacity="1" class="node node-focusable" transform="translate(${stops(i)},0)">
							<circle r="${stage.circle && stage.circle.rOuter || 15}" class="tick-outer"/>
							<circle r="${stage.circle && stage.circle.r || 10}" class="tick"/>
						</g>`);
					});
				%>
			</g>
		</g>
	</g>
</svg>
</div>
<svg class="graph grid-graph" style="height: 853px;">
	<defs>
		<linearGradient id="gradient-up" class="linear-gradient" x1="0%" y1="100%" x2="0%" y2="0%" spreadMethod="pad">
			<stop offset="0%" class="linear-gradient-stop-backward" stop-opacity="0.35"></stop>
			<stop offset="80%" class="linear-gradient-stop-backward" stop-opacity="1"></stop>
		</linearGradient>
		<linearGradient id="gradient-down" class="linear-gradient" x1="0%" y1="0%" x2="0%" y2="100%" spreadMethod="pad">
			<stop offset="0%" class="linear-gradient-stop-forward" stop-opacity="0.2"></stop>
			<stop offset="80%" class="linear-gradient-stop-forward" stop-opacity="1"></stop>
		</linearGradient>
		<linearGradient id="gradient-dropin" class="linear-gradient" x1="0%" x2="0%" y1="0%" y2="100%" spreadMethod="pad">
		  <stop offset="0%" class="linear-gradient-stop-dropin" stop-opacity="0"/>
		  <stop offset="50%" class="linear-gradient-stop-dropin" stop-opacity="0.8"/>
		</linearGradient>
		<linearGradient id="gradient-dropoff" class="linear-gradient" x1="0%" x2="0%" y1="100%" y2="0%" spreadMethod="pad">
		  <stop offset="0%" class="linear-gradient-stop-dropoff" stop-opacity="0"/>
		  <stop offset="50%" class="linear-gradient-stop-dropoff" stop-opacity="0.8"/>
		</linearGradient>
		<linearGradient id="gradient-forward" class="linear-gradient" x1="0%" x2="100%" y1="0%" y2="0%" spreadMethod="pad">
		  <stop offset="0%" class="linear-gradient-stop-forward" stop-opacity="0.2"/>
		  <stop offset="80%" class="linear-gradient-stop-forward" stop-opacity="1"/>
		</linearGradient>
		<linearGradient id="gradient-backward" class="linear-gradient" x1="100%" x2="0%" y1="0%" y2="0%" spreadMethod="pad">
		  <stop offset="0%" class="linear-gradient-stop-backward" stop-opacity="0.35"/>
		  <stop offset="80%" class="linear-gradient-stop-backward" stop-opacity="1"/>
		</linearGradient>
		<linearGradient id="gradient-axis" class="linear-gradient" x1="1%" x2="99%" y1="0%" y2="0%" spreadMethod="pad">
		  <stop offset="0%" class="linear-gradient-stop-axis" stop-opacity="0"/>
		  <stop offset="4%" class="linear-gradient-stop-axis" stop-opacity="1"/>
		  <stop offset="96%" class="linear-gradient-stop-axis" stop-opacity="1"/>
		  <stop offset="100%" class="linear-gradient-stop-axis" stop-opacity="0"/>
		</linearGradient>
		<clipPath id="clip-active">
		  <rect x="-115" y="-120" width="230" height="115"> </rect>
		</clipPath>
		<clipPath id="clip-inactive">
		  <rect x="-115" y="5" width="230" height="115"> </rect>
		</clipPath>
	</defs>
	<g class="graph-data">
		<g class="graph-elements-svg" transform="translate(140,0)">
			<%
				const DELAY = 200;
				const stopLocation = (vi, hi) => { return { v: 64.5 + (108 * vi), h: 70 + (140 * hi) }; };
				const strokeDirections = {
					e: ['h', 1],
					w: ['h', -1],
					n: ['v', -1],
					s: ['v', 1]
				}

				const stroke = (dir, len) => {
					const axis = strokeDirections[dir][0];
					let length;

					if (axis === 'h') {
						length = ((len * 140) + (len >= 1 ? -40 : -20));
					} else {
						length = ((len * 108) -40);
					}

					return {
						stroke: `${axis}${length * strokeDirections[dir][1]}`,
						length
					};
				}

				const curves = {
					ws: 'q-20,0 -20,20',
					wn: 'q-20,0 -20,-20',
					se: 'q0,20 20,20',
					sw: 'q0,20 -20,20',
					en: 'q20,0 20,-20',
					es: 'q20,0 20,20',
					nw: 'q0,-20 -20,-20',
					ne: 'q0,-20 20,-20'
				}

				const createPath = (pathSegments) => {
					let totalLength = 0;

					const path = pathSegments.reduce((segments, segment, i) => {
						let line = stroke(segment[0], segment[1]);
						totalLength += line.length;

						segments = `${segments} ${line.stroke}`;

						if (pathSegments[i + 1]) {
							segments += ` ${curves[segment[0] + pathSegments[i + 1][0]]}`;
							totalLength += 40; // curves are approx 40 px long.
						}

						return segments;
					}, 'm0,0 q 0,0 0,0 v0.001'); // These seed values ensure that the line shows up even if it is just one segment long (otherwise it sometimes doesn't)

					return { path, length: totalLength };
				}

				const points = locals.points;
			%>
			<!-- the discs -->
			<g class="volume-container">
				<%
					points.forEach((row, vi) => {
						row.forEach((point, hi) => {
							if (Object.keys(points[vi][hi]).length <= 0) return;

							const circles = point.discs && point.discs.reduce((discs, disc) => `${discs}<circle class="volume-shape volume-${disc.audience} volume-${disc.state}" r="${disc.r}" clip-path="url(#clip-${disc.state})" style="animation-delay: ${DELAY * (vi + hi)}ms;"></circle>`, '');

							const stop = stopLocation(vi, hi);
							echo(`
								<g class="volume state-default row${vi}col${hi}" transform="translate(${stop.h},${stop.v})">
									${circles}
									<circle class="volume-outline" r="34"></circle>
								</g>
							`);
						});
					});
				%>
			</g>

			<!-- the lines -->
			<g class="flow-container">
				<%
					points.forEach((row, vi) => {
						row.forEach((point, hi) => {
							const stop = stopLocation(vi, hi);
							const flows = point.flows && point.flows.reduce((flows, flow) => {
								if (flow.type.match('in|off')) {
									const classes = classnames(
										`flow-drop${flow.type}`,
										'flow-type-drop',
										'flow-normal',
										'flow-shape',
										{'flow-thin': flow.width < 10}
									)
									return `${flows}<rect width="${flow.width}" x="-${flow.width/2}" y="${flow.type === 'in' ? '-44' : 0}" class="${classes}" fill="url(#gradient-drop${flow.type})" style="animation: grow ${DELAY}ms linear forwards; animation-delay: ${(DELAY * (vi + hi)) - (flow.type === 'in' ? DELAY -10 : 0)}ms;"></rect>`;
								}
								const path = createPath(flow.path);
								return `${flows}
									<path class="flow-${flow.type} flow-type-directional flow-thin flow-shape" fill="none" d="${path.path}" stroke="url(#gradient-${flow.type})" stroke-width="${flow.width || 1}" stroke-dasharray="${path.length}" stroke-dashoffset="${path.length}"
										style="animation: dash ${Math.floor(path.length/100) * DELAY}ms linear forwards; animation-delay: ${DELAY * (vi + hi)}ms;"
									></path>
									<path class="flow-${flow.type} flow-type-directional flow-thin flow-shape flow-tooltip-helper" fill="none" d="${path.path}" stroke="transparent" stroke-width="6" stroke-dasharray="${path.length}" stroke-dashoffset="${path.length}"></path>
								`;
							}, '');
							echo(`
								<g class="flow flow-grid state-default row${vi}col${hi}" transform="translate(${stop.h},${stop.v})">
									${flows}
								</g>
							`);
						});
					});
				%>
			</g>

			<!-- the circles on the lines -->
			<g class="node-container">
				<%
					points.forEach((row, vi) => {
						row.forEach((point, hi) => {
							const stop = stopLocation(vi, hi);
							if (Object.keys(points[vi][hi]).length <= 0) return;
							echo(`
								<g opacity="1" class="node state-default node-focusable row${vi}col${hi}" transform="translate(${stop.h},${stop.v})">
									<circle r="${point.rOuter || 15}" class="tick-outer" style="animation-delay: ${DELAY * (vi + hi)}ms;"></circle>
									<circle r="${point.r || 10}" class="tick" style="animation-delay: ${DELAY * (vi + hi)}ms;"></circle>
								</g>
							`);
						});
					});
				%>
			</g>
		</g>
	</g>
	<g class="graph-marks">
		<g></g>
	</g>
</svg>
<div class="grid-label-container graph-elements-html dynamic-placement" style="transform: translate(456px, 220px);">
	<div class="row-labels">
		<div class="row-group-label-container">
			<div class="journeys-label-container row-label-container dynamic-placement journeys-label-clickable" data-channel="WEB" style="opacity: 1; left: -90px; top: 64.5px;"><label class="journeys-label row-label row-label-centered"><span class="row-label-part row-icon one-glyphicon-lg one-glyphicon-laptop"></span> Web</label></div>
		</div>
		<div class="row-group-label-container">
			<div class="journeys-label-container row-label-container dynamic-placement journeys-label-clickable" data-channel="MOBILE" style="opacity: 1; left: -90px; top: 172.5px;"><label class="journeys-label row-label row-label-centered"><span class="row-label-part row-icon one-glyphicon-lg one-glyphicon-mobile"></span> Mobile</label></div>
		</div>
		<div class="row-group-label-container">
			<div class="journeys-label-container row-label-container dynamic-placement journeys-label-clickable" data-channel="SOCIAL" style="opacity: 1; left: -90px; top: 280.5px;"><label class="journeys-label row-label row-label-centered"><span class="row-label-part row-icon one-glyphicon-lg one-glyphicon-social"></span> Social</label></div>
		</div>
		<div class="row-group-label-container">
			<div class="journeys-label-container row-label-container dynamic-placement journeys-label-clickable" data-channel="PHYSICAL" style="opacity: 1; left: -90px; top: 388.5px;"><label class="journeys-label row-label row-label-centered"><span class="row-label-part row-icon one-glyphicon-lg one-glyphicon-physical"></span> Physical</label></div>
		</div>
	</div>
	<div class="node-labels"> </div>
</div>
<div style="position: fixed; bottom: 0px; left: 338px; width: 926px; height: 60px; background-color: #F3F2F2; border-radius: 0 0 4px 0; padding: 16px;">
	<img src="/images/lifecycles.footer.svg" />
</div>