<!DOCTYPE html>
<html>

<head>
	<link rel="stylesheet" href="/styles/salesforce-lightning-design-system.css" />
	<link rel="stylesheet" href="/styles/style.css">


	<script>
		const demoMagickFlowDirectoryName = '<%=locals.urlSlug%>';
		const locals = {};
	<%
		Object.keys(locals).forEach(function(key, fileIndex) {
			/*
				This here \`Object.keys\` loop looks strange, but is helful.

				This exposes _some_ of the \`locals\` variable in the client side
				scripts.

				Magick Flows, in particular, take advantage of this capability.

				The \`locals\` object in the EJS server memory can, under some
				circumstances, contain a reference to itself, it seems.

				Although scary and worrisome the first time one encounters it, it
				actually is not a big deal, it's a thing JavaScript handles fairly
				elegantly.

				The problem comes when attempting to turn the object into a JSON string
				-- \`JSON.siteSection\` does not know how to handle this circumstance
				   without guidance.

				It will throw an error about a circular reference. ¯\\_(ツ)_/¯


				> See this Stack Exchange for more information:
				>
				> https://stackoverflow.com/questions/10392293/stringify-convert-to-json-a-javascript-object-with-circular-reference

				Anyhoooooo...  What we're doing _here_ is iterating through the keys of
				the \`locals\` object and explicitly excluding some keys from that
				object.

				NOW: the tricky bit here is to remember that this is a mixture of server-
				side and client-side code.

				We are iterating through the server-side variable and writing out
				statements in a \`<script>\` tag in the rendered HTML.

				Don't mess it up!
			*/
			// console.group(` --> key: `, key);
			if (key != '_locals' && key != 'path' && key != 'util' && key != 'classnames' && key != 'sizeOf') {
				if(typeof locals[key] === 'object') {

					// client-side output below ---v
					// echo(`console.group('Setting variable from key \`${key}\`');`);
					echo(`locals['${key}'] = ${JSON.stringify(locals[key])};`);
					// echo(`console.groupEnd();`)
					// client-side output above ---^
				} else {
					// client-side output below ---v
					// echo(`console.group('Setting variable from key \`${key}\`');`);
					echo(`locals['${key}'] = "${locals[key]}";`);
					// echo(`console.groupEnd();`)
					// client-side output above ---^
				}
			} else {
				// console.log('NOT GONNA SAVE: key: ', key);
			}
			// console.groupEnd();
		});



		console.groupEnd();
		// server-side output above ---^
		//
		// back to client-side output now ---V
	%>
		console.group(`Demuxe: server-side \`locals\`:
	Set: product-templates/catalogue/wrapper.ejs:82
	`);
		console.dir(locals);
		console.groupEnd();
		const url = new URL( window.location.href );
		const magickFlows = locals.magickFlows;
		const urlSlug = '<%=locals.urlSlug%>';
		const triggerParam = '<%=locals.trigger%>';
	</script>


</head>

<body class="demuxe-body demuxe-body--catalogue" data-path="<%= `${locals.pageContents}` %>">
	<%- include('includes/header') %>

	<div id="content-wrapper" class="slds-container_fluid">
		<div id="content" class="">
			<%- include(`${locals.pageContents}`) %>
		</div>
	</div>

	<%- include('includes/global/footer-scripts') %>

</body>

</html>