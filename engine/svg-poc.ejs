

<svg class="graph lifecycle-graph" height="1000" width="1000">
<style>
@font-face {
		font-family: "Salesforce Sans";
		src: url(fonts/SalesforceSans-Regular.woff2) format('woff2'),url(fonts/SalesforceSans-Regular.woff) format('woff');
		font-weight: 400;
		font-style: normal
}

@font-face {
		font-family: "Salesforce Sans";
		src: url(fonts/SalesforceSans-Italic.woff2) format('woff2'),url(fonts/SalesforceSans-Italic.woff) format('woff');
		font-weight: 400;
		font-style: italic
}

@font-face {
		font-family: "Salesforce Sans";
		src: url(fonts/SalesforceSans-BoldItalic.woff2) format('woff2'),url(fonts/SalesforceSans-BoldItalic.woff) format('woff');
		font-weight: 700;
		font-style: italic
}

@font-face {
		font-family: "Salesforce Sans";
		src: url(fonts/SalesforceSans-Light.woff2) format('woff2'),url(fonts/SalesforceSans-Light.woff) format('woff');
		font-weight: 300;
		font-style: normal
}

@font-face {
		font-family: "Salesforce Sans";
		src: url(fonts/SalesforceSans-LightItalic.woff2) format('woff2'),url(fonts/SalesforceSans-LightItalic.woff) format('woff');
		font-weight: 300;
		font-style: italic
}

@font-face {
		font-family: "Salesforce Icons";
		src: url(fonts/sf-icons.woff) format('woff'),url(fonts/sf-icons.svg#sf-icons) format('svg');
		font-weight: 400;
		font-style: normal
}
body {
		font-family: 'Salesforce Sans',Arial,sans-serif;
		font-size: 14px;
		line-height: 1.4;
		color: #16325c;
		background-color: #fafaf9;
}

label {
		font-family: 'Salesforce Sans',Arial,sans-serif;
		font-size: 1.4rem;
		font-style: normal;
		font-weight: 700;
		color: #5d686f;
}

.dynamic-placement {
		will-change: transform;
		position: absolute;
		top: 0;
		left: 0;
}

.journeys-label-container {
		width: 160px;
		text-align: center;
}

.journeys-label {
		overflow: hidden;
		text-overflow: ellipsis;
		white-space: nowrap;
		font-family: 'Salesforce Sans',Arial,sans-serif;
		font-size: 1.2rem;
		font-style: normal;
		font-weight: 500;
		-webkit-transition: max-width .5s cubic-bezier(.215,.61,.355,1);
		transition: max-width .5s cubic-bezier(.215,.61,.355,1);
		color: #2b2826;
		margin-bottom: 0;
		text-transform: none;
		vertical-align: middle;
		max-width: 100%;
}

.lifecycle-stage-label {
		font-family: 'Salesforce Sans',Arial,sans-serif;
		font-size: 16px;
		font-style: normal;
		font-weight: 400;
		cursor: pointer;
		display: inline-block;
		line-height: 19px;
		max-width: 105px;
		height: 19px;
}

.graph {
		width: 100%
}

.flow-container {
		-webkit-transition: opacity .5s,visibility .5s;
		transition: opacity .5s,visibility .5s
}

.separator {
		stroke-width: 1;
		stroke-dasharray: 1,8;
		stroke-dashoffset: 1
}

 .separator-transitionable {
		-webkit-transition: opacity .5s,visibility .5s;
		transition: opacity .5s,visibility .5s
}

.separator-graph {
		visibility: hidden;
		pointer-events: none;
		opacity: 0;
		-webkit-transform: translateY(40px);
		transform: translateY(40px)
}

.separator-column {
		stroke-width: 2;
		stroke-dasharray: 2,8
}

.separator-row {
		stroke: #c9c7c5
}

.volume-active {
		fill: #1589ee;
		fill-opacity: .25
}

.volume-inactive {
		fill: #7874a3;
		fill-opacity: .25
}

.volume-outline {
		fill: none;
		stroke: #dddbda;
		stroke-width: 1
}

circle.tick {
		fill: #b0adab;
		fill-opacity: 1;
		stroke: #fff;
		stroke-width: 1.5
}

circle.tick-outer {
		fill: #000;
		fill-opacity: .3;
		pointer-events: none
}

.node-focusable .tick {
		cursor: pointer
}

circle {
		-webkit-transition: opacity .5s,fill .5s,stroke .5s,visibility .5s;
		transition: opacity .5s,fill .5s,stroke .5s,visibility .5s;
}

circle.volume-active, circle.volume-inactive {
	animation: grow-circle 400ms linear backwards;
}

@keyframes grow-circle {
	from {
		r: 0;
	}
}

.flow line, .flow path, .flow rect {
		-webkit-transition: opacity .5s,visibility .5s;
		transition: opacity .5s,visibility .5s;
}

.flow rect {
	animation: grow 400ms linear forwards;
}

@keyframes grow {
	from {
		height: 0px;
	}

	to {
		height: 160px;
	}
}

/*
	The dashoffset and dasharray numbers are brute forced, which means they are messing up the animation delay (you have to get through all of the blank space in the offset before the animation appears to start). You could figure out the actual length of half of the circle's circumference and make that number the dasharray and dashoffset which would make the animation delay line up better and therefore probably make the animation length less random seeming and more programmable.

	https://stackoverflow.com/questions/30355241/get-the-length-of-a-svg-line-rect-polygon-and-circle-tags
*/
.flow path {
	stroke-dasharray: 500;
	stroke-dashoffset: 500;
	animation: dash 1s linear forwards;
	fill: none;
}

.flow path.flow-span3  {
	stroke-dasharray: 800;
	stroke-dashoffset: 800;
	animation: dash 1430ms linear forwards;
	fill: none;
}

.flow path.flow-span4, .flow path.flow-span5  {
	stroke-dasharray: 1200;
	stroke-dashoffset: 1200;
	animation: dash 2150ms linear forwards;
	fill: none;
}


@keyframes dash {
	to {
		stroke-dashoffset: 0;
	}
}


.set0 circle, .set0 rect.flow-dropoff, .set1 rect.flow-dropin {
	animation-delay: 400ms;
}

.set1 circle, .set1 rect.flow-dropoff, .set2 rect.flow-dropin {
	animation-delay: 800ms;
}

.set2 circle, .set2 rect.flow-dropoff, .set3 rect.flow-dropin {
	animation-delay: 1200ms;
}

.set3 circle, .set3 rect.flow-dropoff, .set4 rect.flow-dropin {
	animation-delay: 1600ms;
}

.set4 circle, .set4 rect.flow-dropoff, .set5 rect.flow-dropin {
	animation-delay: 2000ms;
}

.set5 circle, .set5 rect.flow-dropoff, .set6 rect.flow-dropin {
	animation-delay: 2400ms;
}

.flow-dropin {
		opacity: .7;
}

.flow-dropoff {
		opacity: 1;
}


rect {
		shape-rendering: crispEdges;
}

circle {
		-webkit-transition: opacity .5s,fill .5s,stroke .5s,visibility .5s;
		transition: opacity .5s,fill .5s,stroke .5s,visibility .5s
}

rect {
		shape-rendering: crispEdges
}

 .flow line, .flow path, .flow rect {
		-webkit-transition: opacity .5s,visibility .5s;
		transition: opacity .5s,visibility .5s
}

 .flow:hover .flow-forward, .flow:hover .flow-passive--forward {
		stroke: #1589ee
}

 .flow:hover .flow-backward, .flow:hover .flow-passive--backward {
		stroke: #5e429b
}

 .flow:hover .flow-dropin {
		fill: #1589ee
}

 .flow:hover .flow-dropoff {
		fill: #5e429b
}

 .flow-count-background {
		fill: rgba(0,0,0,.5);
		shape-rendering: initial
}

 .flow-dropin.flow-thin, .flow-dropoff.flow-thin {
		stroke: transparent;
		stroke-width: 4px
}

 .flow-dropoff {
		cursor: pointer
}

.linear-gradient-stop-forward {
		stop-color: #5eb4ff
}

.linear-gradient-stop-dropin {
		stop-color: #1589ee
}

.linear-gradient-stop-backward {
		stop-color: #7555b8
}

.linear-gradient-stop-dropoff {
		stop-color: #7555b8
}

.linear-gradient-stop-axis {
		stop-color: #c9c7c5
}

.linear-gradient-stop-separator {
		stop-color: #c9c7c5
}


</style>
	<defs>
		<linearGradient id="gradient-dropin" class="linear-gradient" x1="0%" x2="0%" y1="0%" y2="100%" spreadMethod="pad">
			<stop offset="0%" class="linear-gradient-stop-dropin" stop-opacity="0"/>
			<stop offset="50%" class="linear-gradient-stop-dropin" stop-opacity="0.8"/>
		</linearGradient>
		<linearGradient id="gradient-dropoff" class="linear-gradient" x1="0%" x2="0%" y1="100%" y2="0%" spreadMethod="pad">
			<stop offset="0%" class="linear-gradient-stop-dropoff" stop-opacity="0"/>
			<stop offset="50%" class="linear-gradient-stop-dropoff" stop-opacity="0.8"/>
		</linearGradient>
		<linearGradient id="gradient-forward" class="linear-gradient" x1="0%" x2="100%" y1="0%" y2="0%" spreadMethod="pad">
			<stop offset="0%" class="linear-gradient-stop-forward" stop-opacity="0.2"/>
			<stop offset="80%" class="linear-gradient-stop-forward" stop-opacity="1"/>
		</linearGradient>
		<linearGradient id="gradient-backward" class="linear-gradient" x1="100%" x2="0%" y1="0%" y2="0%" spreadMethod="pad">
			<stop offset="0%" class="linear-gradient-stop-backward" stop-opacity="0.35"/>
			<stop offset="80%" class="linear-gradient-stop-backward" stop-opacity="1"/>
		</linearGradient>
		<linearGradient id="gradient-axis" class="linear-gradient" x1="1%" x2="99%" y1="0%" y2="0%" spreadMethod="pad">
			<stop offset="0%" class="linear-gradient-stop-axis" stop-opacity="0"/>
			<stop offset="4%" class="linear-gradient-stop-axis" stop-opacity="1"/>
			<stop offset="96%" class="linear-gradient-stop-axis" stop-opacity="1"/>
			<stop offset="100%" class="linear-gradient-stop-axis" stop-opacity="0"/>
		</linearGradient>
		<clipPath id="clip-active">
			<rect x="-115" y="-120" width="230" height="115"> </rect>
		</clipPath>
		<clipPath id="clip-inactive">
			<rect x="-115" y="5" width="230" height="115"> </rect>
		</clipPath>
	</defs>
	<g class="graph-data" transform="translate(0,331.5)">

		<!-- The center line -->
		<g class="graph-marks">
			<rect class="axis" width="1012" fill="url(#gradient-axis)" x="80" y="-1" height="2"> </rect>
			<line class="separator separator-row separator-graph" x1="0" y1="0" x2="100%" y2="0"> </line>
		</g>

		<% 
			const stops = (i) => 70 + (i * 140);
			const arcShape = (span, direction) => `M0,0 A${span*70},${span*70} 0 0 1 ${direction === 'forward' ? '' : '-'}${span*140},0`;

			const stages = [
				{
					label: 'Awareness',
					discs: [{ type: 'active', r: 100 }, { type: 'active', r: 26 }, { type: 'inactive', r: 62 }],
					arcs: [
						{ direction: 'forward', width: 19.31, span: 1 }, 
						{ direction: 'forward', width: 16.85, span: 2 },
						{ direction: 'forward', width: 12.31, span: 3 }, 
						{ direction: 'forward', width: 9.85, span: 4 },
						{ direction: 'forward', width: 6.31, span: 5 }
					],
					joinAndLeaveFlows: [{ type: 'in', width: 20 }, { type: 'off', width: 15 }]
				},
				{
					label: 'Research',
					discs: [{ type: 'active', r: 47 }, { type: 'active', r: 28 }, { type: 'inactive', r: 36 }, {type: 'inactive', r: 23}],
					arcs: [
						{ direction: 'forward', width: 19.31, span: 1 }, 
						{ direction: 'forward', width: 16.85, span: 2 },
						{ direction: 'forward', width: 12.31, span: 3 }, 
						{ direction: 'forward', width: 9.85, span: 4 },
						{ direction: 'backward', width: 19.31, span: 1 }
					],
					joinAndLeaveFlows: [{ type: 'in', width: 4 }, { type: 'off', width: 5 }]
				},
				{
					label: 'Purchase',
					discs: [{ type: 'active', r: 90 }, { type: 'active', r: 100 }, { type: 'inactive', r: 50 }, {type: 'inactive', r: 25}],
					arcs: [
						{ direction: 'forward', width: 19.31, span: 1 }, 
						{ direction: 'forward', width: 16.85, span: 2 },
						{ direction: 'forward', width: 12.31, span: 3 },
						{ direction: 'backward', width: 19.31, span: 1 }, 
						{ direction: 'backward', width: 16.85, span: 2 }
					],
					joinAndLeaveFlows: [{ type: 'in', width: 12 }, { type: 'off', width: 25 }]
				},
				{
					label: 'Service',
					discs: [{ type: 'active', r: 40 }, { type: 'active', r: 50 }, { type: 'inactive', r: 70 }, {type: 'inactive', r: 10}],
					arcs: [
						{ direction: 'forward', width: 19.31, span: 1 }, 
						{ direction: 'forward', width: 16.85, span: 2 },
						{ direction: 'backward', width: 19.31, span: 1 }, 
						{ direction: 'backward', width: 16.85, span: 2 },
						{ direction: 'backward', width: 12.31, span: 3 }
					],
					joinAndLeaveFlows: [{ type: 'in', width: 25 }, { type: 'off', width: 12 }]
				},
				{
					label: 'Advocate',
					discs: [{ type: 'active', r: 100 }, { type: 'active', r: 30 }, { type: 'inactive', r: 40 }, {type: 'inactive', r: 15}],
					arcs: [
						{ direction: 'forward', width: 19.31, span: 1 },
						{ direction: 'backward', width: 19.31, span: 1 }, 
						{ direction: 'backward', width: 16.85, span: 2 },
						{ direction: 'backward', width: 12.31, span: 3 }, 
						{ direction: 'backward', width: 9.85, span: 4 }
					],
					joinAndLeaveFlows: [{ type: 'in', width: 4 }, { type: 'off', width: 5 }]
				},
				{
					label: 'Use',
					discs: [{ type: 'active', r: 70 }, { type: 'active', r: 50 }, { type: 'inactive', r: 90 }, {type: 'inactive', r: 50}],
					arcs: [
						{ direction: 'backward', width: 19.31, span: 1 }, 
						{ direction: 'backward', width: 16.85, span: 2 },
						{ direction: 'backward', width: 12.31, span: 3 }, 
						{ direction: 'backward', width: 9.85, span: 4 },
						{ direction: 'backward', width: 6.31, span: 5 }
					],
					joinAndLeaveFlows: [{ type: 'in', width: 2 }, { type: 'off', width: 5 }]
				}
			];
		%>

		<g class="graph-elements-svg" transform="translate(166,0)">
			
			<!-- the discs -->
			<g>
			<% 
				stages.forEach((stage, i) => {
					echo(`<g class="set${i}" transform="translate(${stops(i)},0)">`);
					stage.discs.forEach((disc, i) => {
						echo(`<circle class="volume-${disc.type}" r="${disc.r}" clip-path="url(#clip-${disc.type})"/>`);
					});
					echo('</g>');
				});
			%>
			</g>
		
			<!-- the arcs & rectangles -->
			<g class="flow-container">
				<!-- the rectangles -->
				<% 
					stages.forEach((stage, i) => { 
						stage.joinAndLeaveFlows.forEach(rect => {
							const x = (rect.width / 2) * -1;
							const y = rect.type === 'in' ? '-160' : '0';
							const classes = classnames(`flow-drop${rect.type}`, {
								'flow-thin': rect.width < 10
							})

							echo(`<g class="flow set${i}" transform="translate(${stops(i)},0)">
								<rect 
									class="${classes}" 
									width="${rect.width}" 
									x="${x}"
									y="${y}"
									fill="url(#gradient-drop${rect.type})"/>
							</g>`);
						});
					}); 
				%>

				<!-- the arcs -->
				<%
					stages.forEach((stage, i) => { 
						stage.arcs.forEach(arc => {
							const classes = classnames(
								`flow-${arc.direction}`,
								`flow-span${arc.span}`,
								{ 'flow-thin': arc.width < 10 }
							);

							echo(`<g class="flow" transform="translate(${stops(i)},0)">
								<path 
									class="${classes}" 
									style="animation-delay: ${(i+1) * 400}ms;" 
									fill="none" 
									d="${arcShape(arc.span, arc.direction)}" 
									stroke="url(#gradient-${arc.direction})" 
									stroke-width="${arc.width}"/>
							</g>`);
						});
					}); 
				%>
			</g>

			<!-- the circles on the lines -->
			<g class="node-container">
				<%
					stages.forEach((stage, i) => { 
						echo(`<g opacity="1" class="node node-focusable" transform="translate(${stops(i)},0)">
							<circle r="${stage.circle && stage.circle.rOuter || 15}" class="tick-outer"/>
							<circle r="${stage.circle && stage.circle.r || 10}" class="tick"/>
						</g>`);
					}); 
				%>
			</g>
		</g>
	</g>
</svg>
<div class="lifecycle-label-container dynamic-placement" style="transform: translate(176px, 320.5px)">
	<div class="lifecycle-stage-labels" style="transform: translate(0px, -64px);">
		<%
			stages.forEach((stage, i) => {
				echo(`
					<div class="journeys-label-container lifecycle-stage-label-container dynamic-placement is-single-column" style="opacity: 1; transform: translateX(${stops(i)}px) translateX(-50%);">
						<label class="journeys-label lifecycle-stage-label">
							<span class="journeys-label-content lifecycle-stage-label-content">${stage.label}</span>
						</label>
					</div>
				`);
			});
		%>
	</div>
	<div class="node-labels"> </div>
</div>