<svg class="graph grid-graph" style="height: 853px;">
	<style>
@font-face {
    font-family: "Salesforce Sans";
    src: url(fonts/SalesforceSans-Regular.woff2) format('woff2'),url(fonts/SalesforceSans-Regular.woff) format('woff');
    font-weight: 400;
    font-style: normal
}

@font-face {
    font-family: "Salesforce Sans";
    src: url(fonts/SalesforceSans-Italic.woff2) format('woff2'),url(fonts/SalesforceSans-Italic.woff) format('woff');
    font-weight: 400;
    font-style: italic
}

@font-face {
    font-family: "Salesforce Sans";
    src: url(fonts/SalesforceSans-BoldItalic.woff2) format('woff2'),url(fonts/SalesforceSans-BoldItalic.woff) format('woff');
    font-weight: 700;
    font-style: italic
}

@font-face {
    font-family: "Salesforce Sans";
    src: url(fonts/SalesforceSans-Light.woff2) format('woff2'),url(fonts/SalesforceSans-Light.woff) format('woff');
    font-weight: 300;
    font-style: normal
}

@font-face {
    font-family: "Salesforce Sans";
    src: url(fonts/SalesforceSans-LightItalic.woff2) format('woff2'),url(fonts/SalesforceSans-LightItalic.woff) format('woff');
    font-weight: 300;
    font-style: italic
}

@font-face {
    font-family: "Salesforce Icons";
    src: url(fonts/sf-icons.woff) format('woff'),url(fonts/sf-icons.svg#sf-icons) format('svg');
    font-weight: 400;
    font-style: normal
}

* {
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
}

.graph {
    width: 100%
}

.flow-container {
    -webkit-transition: opacity .5s,visibility .5s;
    transition: opacity .5s,visibility .5s
}

.separator {
    stroke-width: 1;
    stroke-dasharray: 1,8;
    stroke-dashoffset: 1
}

 .separator-transitionable {
    -webkit-transition: opacity .5s,visibility .5s;
    transition: opacity .5s,visibility .5s
}

.separator-graph {
    visibility: hidden;
    pointer-events: none;
    opacity: 0;
    -webkit-transform: translateY(40px);
    transform: translateY(40px)
}

.separator-column {
    stroke-width: 2;
    stroke-dasharray: 2,8
}

.separator-row {
    stroke: #c9c7c5
}

.volume-active {
    fill: #1589ee;
    fill-opacity: .25
}

.volume-inactive {
    fill: #7874a3;
    fill-opacity: .25
}

.volume-outline {
    fill: none;
    stroke: #dddbda;
    stroke-width: 1
}

circle.tick {
    fill: #b0adab;
    fill-opacity: 1;
    stroke: #fff;
    stroke-width: 1.5
}

circle.tick-outer {
    fill: #000;
    fill-opacity: .3;
    pointer-events: none
}

.node-focusable .tick {
    cursor: pointer
}

circle {
    -webkit-transition: opacity .5s,fill .5s,stroke .5s,visibility .5s;
    transition: opacity .5s,fill .5s,stroke .5s,visibility .5s;
}

circle.volume-active, circle.volume-inactive {
  animation: grow-circle 400ms linear backwards;
}

@keyframes grow-circle {
  from {
    r: 0;
  }
}

.flow line, .flow path, .flow rect {
    -webkit-transition: opacity .5s,visibility .5s;
    transition: opacity .5s,visibility .5s;
}

.flow rect {
  animation: grow 400ms linear forwards;
}

@keyframes grow {
  from {
    height: 0px;
  }

  to {
    height: 44px;
  }
}

.flow path {
/*  stroke-dasharray: 700;
  stroke-dashoffset: 700;*/
  animation: dash 1s linear forwards;
  fill: none;
}


@keyframes dash {
  to {
    stroke-dashoffset: 0;
  }
}


.set0 circle, .set1 rect {
  animation-delay: 400ms;
}

.set1 circle, .set2 rect {
  animation-delay: 800ms;
}

.set2 circle, .set3 rect {
  animation-delay: 1200ms;
}

.set3 circle, .set4 rect {
  animation-delay: 1600ms;
}

.set4 circle, .set5 rect {
  animation-delay: 2000ms;
}

.set5 circle, .set6 rect {
  animation-delay: 2400ms;
}

.flow-dropin {
    opacity: .7;
}

.flow-dropoff {
    opacity: 1;
}


rect {
    shape-rendering: crispEdges;
}

 circle {
    -webkit-transition: opacity .5s,fill .5s,stroke .5s,visibility .5s;
    transition: opacity .5s,fill .5s,stroke .5s,visibility .5s
}

 rect {
    shape-rendering: crispEdges
}

 .flow line, .flow path, .flow rect {
    -webkit-transition: opacity .5s,visibility .5s;
    transition: opacity .5s,visibility .5s
}

 .flow:hover .flow-forward, .flow:hover .flow-passive--forward {
    stroke: #1589ee
}

 .flow:hover .flow-backward, .flow:hover .flow-passive--backward {
    stroke: #5e429b
}

 .flow:hover .flow-dropin {
    fill: #1589ee
}

 .flow:hover .flow-dropoff {
    fill: #5e429b
}

 .flow-count-background {
    fill: rgba(0,0,0,.5);
    shape-rendering: initial
}

 .flow-dropin.flow-thin, .flow-dropoff.flow-thin {
    stroke: transparent;
    stroke-width: 4px
}

 .flow-dropoff {
    cursor: pointer
}

.linear-gradient-stop-forward {
    stop-color: #5eb4ff
}

.linear-gradient-stop-dropin {
    stop-color: #1589ee
}

.linear-gradient-stop-backward {
    stop-color: #7555b8
}

.linear-gradient-stop-dropoff {
    stop-color: #7555b8
}

.linear-gradient-stop-axis {
    stop-color: #c9c7c5
}

.linear-gradient-stop-separator {
    stop-color: #c9c7c5
}

.graph {
    width: 100%;
}

.node-labels {
    -webkit-transform: translate(0,12px);
    transform: translate(0,12px);
    visibility: hidden;
    pointer-events: none;
    opacity: 0;
}

.separator-graph {
    visibility: visible;
    pointer-events: auto;
    opacity: 1;
}

.volume-active {
    fill: #1589ee;
    fill-opacity: .25;
}

.volume-inactive {
    fill: #7874a3;
    fill-opacity: .25;
}

.volume-outline {
    fill: none;
    stroke: #dddbda;
    stroke-width: 1;
}

circle.tick {
    fill: #b0adab;
    fill-opacity: 1;
    stroke: #fff;
    stroke-width: 1.5;
}

circle.tick-outer {
    fill: #000;
    fill-opacity: .3;
    pointer-events: none;
}

.no-volumes .volume-all {
    visibility: hidden!important;
    pointer-events: none!important;
    opacity: 0!important;
}

.no-actions .volume-helped {
    visibility: hidden!important;
    pointer-events: none!important;
    opacity: 0!important;
}

.state-background .flow-shape, .state-background .volume-shape, .state-connected .flow-shape, .state-connected .volume-shape {
    opacity: .2;
}

.state-hidden .flow-count-container, .state-hidden .flow-shape, .state-hidden .volume-shape {
    visibility: hidden;
    pointer-events: none;
    opacity: 0;
}

.volume.state-background .volume-all, .volume.state-connected .volume-all {
    opacity: .2;
}

.flow line, .flow path, .flow rect {
    -webkit-transition: opacity .5s,visibility .5s;
    transition: opacity .5s,visibility .5s;
}

.flow:hover .flow-forward, .flow:hover .flow-passive--forward {
    stroke: #1589ee;
}

.flow:hover .flow-backward, .flow:hover .flow-passive--backward {
    stroke: #5e429b;
}

.flow:hover .flow-dropin {
    fill: #1589ee;
}

.flow:hover .flow-dropoff {
    fill: #5e429b;
}

.flow-count-background {
    fill: rgba(0,0,0,.5);
    shape-rendering: initial;
}

.flow-dropin.flow-thin, .flow-dropoff.flow-thin {
    stroke: transparent;
    stroke-width: 4px;
}

.flow-dropoff {
    cursor: pointer;
}

.no-flow-backward .flow-backward, .no-flow-dropin .flow-dropin, .no-flow-dropoff .flow-dropoff, .no-flow-forward .flow-forward, .no-flow-passive .flow-passive {
    visibility: hidden!important;
    pointer-events: none!important;
    opacity: 0!important;
}

.no-flows .flow-container {
    visibility: hidden!important;
    pointer-events: none!important;
    opacity: 0!important;
}

circle {
    -webkit-transition: opacity .5s,fill .5s,stroke .5s,visibility .5s;
    transition: opacity .5s,fill .5s,stroke .5s,visibility .5s;
}

rect {
    shape-rendering: crispEdges;
}

.flow line, .flow path, .flow rect {
    -webkit-transition: opacity .5s,visibility .5s;
    transition: opacity .5s,visibility .5s;
}

.flow:hover .flow-forward, .flow:hover .flow-passive--forward {
    stroke: #1589ee;
}

.flow:hover .flow-backward, .flow:hover .flow-passive--backward {
    stroke: #5e429b;
}

.flow:hover .flow-dropin {
    fill: #1589ee;
}

.flow:hover .flow-dropoff {
    fill: #5e429b;
}

.flow-count-background {
    fill: rgba(0,0,0,.5);
    shape-rendering: initial;
}

.flow-dropin.flow-thin, .flow-dropoff.flow-thin {
    stroke: transparent;
    stroke-width: 4px;
}

.flow-dropoff {
    cursor: pointer;
}

.one-glyphicon, [class*=one-glyphicon-], [class^=one-glyphicon-] {
    font-family: "Salesforce Icons"!important;
    speak: none;
    font-style: normal;
    font-weight: 400;
    font-variant: normal;
    text-transform: none;
    line-height: inherit;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    position: relative;
    top: 0;
    display: inline-block;
    min-width: 1em;
    text-align: center;
    vertical-align: middle;
}

.one-glyphicon-lg {
    font-size: 20px;
}

.one-glyphicon:before, [class*=one-glyphicon-]:before, [class^=one-glyphicon-]:before {
    padding: 0 1px;
}

.one-glyphicon-mobile:before {
    content: "\e60b"
}

.one-glyphicon-laptop:before {
    content: "\e60c"
}

.one-glyphicon-physical:before {
    content: "\e610"
}

.one-glyphicon-social:before {
    content: "\e611"
}

.dynamic-placement {
    will-change: transform;
    position: absolute;
    top: 0;
    left: 0;
}
	</style>
	<defs>
		<linearGradient id="gradient-up" class="linear-gradient" x1="0%" y1="100%" x2="0%" y2="0%" spreadMethod="pad">
			<stop offset="0%" class="linear-gradient-stop-backward" stop-opacity="0.35"></stop>
			<stop offset="80%" class="linear-gradient-stop-backward" stop-opacity="1"></stop>
		</linearGradient>
		<linearGradient id="gradient-down" class="linear-gradient" x1="0%" y1="0%" x2="0%" y2="100%" spreadMethod="pad">
			<stop offset="0%" class="linear-gradient-stop-forward" stop-opacity="0.2"></stop>
			<stop offset="80%" class="linear-gradient-stop-forward" stop-opacity="1"></stop>
		</linearGradient>
		<linearGradient id="gradient-dropin" class="linear-gradient" x1="0%" x2="0%" y1="0%" y2="100%" spreadMethod="pad">
		  <stop offset="0%" class="linear-gradient-stop-dropin" stop-opacity="0"/>
		  <stop offset="50%" class="linear-gradient-stop-dropin" stop-opacity="0.8"/>
		</linearGradient>
		<linearGradient id="gradient-dropoff" class="linear-gradient" x1="0%" x2="0%" y1="100%" y2="0%" spreadMethod="pad">
		  <stop offset="0%" class="linear-gradient-stop-dropoff" stop-opacity="0"/>
		  <stop offset="50%" class="linear-gradient-stop-dropoff" stop-opacity="0.8"/>
		</linearGradient>
		<linearGradient id="gradient-forward" class="linear-gradient" x1="0%" x2="100%" y1="0%" y2="0%" spreadMethod="pad">
		  <stop offset="0%" class="linear-gradient-stop-forward" stop-opacity="0.2"/>
		  <stop offset="80%" class="linear-gradient-stop-forward" stop-opacity="1"/>
		</linearGradient>
		<linearGradient id="gradient-backward" class="linear-gradient" x1="100%" x2="0%" y1="0%" y2="0%" spreadMethod="pad">
		  <stop offset="0%" class="linear-gradient-stop-backward" stop-opacity="0.35"/>
		  <stop offset="80%" class="linear-gradient-stop-backward" stop-opacity="1"/>
		</linearGradient>
		<linearGradient id="gradient-axis" class="linear-gradient" x1="1%" x2="99%" y1="0%" y2="0%" spreadMethod="pad">
		  <stop offset="0%" class="linear-gradient-stop-axis" stop-opacity="0"/>
		  <stop offset="4%" class="linear-gradient-stop-axis" stop-opacity="1"/>
		  <stop offset="96%" class="linear-gradient-stop-axis" stop-opacity="1"/>
		  <stop offset="100%" class="linear-gradient-stop-axis" stop-opacity="0"/>
		</linearGradient>
		<clipPath id="clip-active">
		  <rect x="-115" y="-120" width="230" height="115"> </rect>
		</clipPath>
		<clipPath id="clip-inactive">
		  <rect x="-115" y="5" width="230" height="115"> </rect>
		</clipPath>
	</defs>
	<g class="graph-data">
		<g class="graph-elements-svg" transform="translate(166,0)">
			<%
				const stopLocation = (vi, hi) => { return { v: 64.5 + (108 * vi), h: 70 + (140 * hi) }; };
				const strokeDirections = {
					e: ['h', 1],
					w: ['h', -1],
					n: ['v', -1],
					s: ['v', 1]
				}

				const stroke = (dir, len) => {
					const axis = strokeDirections[dir][0];
					let length;

					if (axis === 'h') {
						length = ((len * 140) + (len >= 1 ? -40 : -20));
					} else {
						length = ((len * 108) -40);
					}

					return {
						stroke: `${axis}${length * strokeDirections[dir][1]}`,
						length
					};
				}

				const curves = {
					es: 'q20,0 20,20',
					wn: 'q-20,0 -20,-20',
					se: 'q0,20 20,20',
					sw: 'q0,20 -20,20',
					en: 'q20,0 20,-20',
					es: 'q 20,0 20,20',
					nw: 'q0,-20 -20,-20',
					ne: 'q0,-20 20,-20'
				}

				const E = 'e', N = 'n', S = 's', W = 'w';

				const createPath = (pathSegments) => {
					let totalLength = 0;

					const path = pathSegments.reduce((segments, segment, i) => {
						let line = stroke(segment[0], segment[1]);
						totalLength += line.length;

						segments = `${segments} ${line.stroke}`;

						if (pathSegments[i + 1]) {
							segments += ` ${curves[segment[0] + pathSegments[i + 1][0]]}`;
							totalLength += 40; // curves are approx 40 px long.
						}

						return segments;
					}, 'm0,0 q 0,0 0,0 v0.001'); // These seed values ensure that the line shows up even if it is just one segment long (otherwise it sometimes doesn't)

					return { path, length: totalLength };
				}

				const web = {
					awareness: { 
						label: 'awareness',
						discs: [
							{ audience: 'all', state: 'active', r: 32.55 },
							{ audience: 'helped', state: 'active', r: 19.4 },
							{ audience: 'all', state: 'inactive', r: 22 }
						],
						flows: [
							{ type: 'in', width: 10 },
							{ type: 'off', width: 8 },
							{ type: 'forward', path: [[E, 1.2]], width: 4},
							{ type: 'forward', path: [[E, .5], [N, .5], [E, 1], [S, .5], [E, .5]], width: 3},
							{ type: 'forward', path: [[E, .5], [S, 2], [E, .5]], width: 3},
							{ type: 'forward', path: [[E, .5], [S, 3], [E, .5]], width: 1}
						]
					},
					research: {
						discs: [
							{ audience: 'all', state: 'active', r: 21 },
							{ audience: 'all', state: 'inactive', r: 20 }
						] ,
						flows: [
							{ type: 'in', width: 1 },
							{ type: 'off', width: 6 },
							{ type: 'forward', path: [[E, 1.2]], width: 2},
							{ type: 'backward', path: [[E, .5], [S, .5], [W, 2], [N, .5], [E, .5]], width: 3}
						]
					},
					purchase: {
						flows: [
							{ type: 'in', width: 1 },
							{ type: 'off', width: 6 },
							{ type: 'backward', path: [[E, .5], [S, .5], [W, 3], [N, .5], [E, .5]], width: 3}
						]
					}		
				}

				const mobile = {
					awareness: { 
						flows: [
							{ type: 'in', width: 3 },
							{ type: 'off', width: 6 }
						]
					}
				};
				const community = {
					research: {
						discs: [
							{ audience: 'all', state: 'active', r: 22 },
							{ audience: 'helped', state: 'active', r: 19 },
							{ audience: 'all', state: 'inactive', r: 19 }
						],
						flows: [
							{ type: 'in', width: 3 },
							{ type: 'off', width: 6 },
							{ type: 'backward', path: [[E, .5], [N, .5], [W, 2], [N, 1.5], [E, .5]], width: 2 }
						]
					}
				};
				const kiosk = {};
				const store = {
					research: {
						discs: [
							{ audience: 'all', state: 'active', r: 18 }
						],
						flows: [
							{ type: 'in', width: 3 },
							{ type: 'off', width: 6 },
							{ type: 'forward', path: [[E, 1.2]], width: 1},
						]
					},
					purchase: {
						discs: [
							{ audience: 'all', state: 'inactive', r: 19 }
						],
						flows: [
							{ type: 'in', width: 3 },
							{ type: 'off', width: 6 },
							{ type: 'backward', path: [[E, .5], [N, .5], [W, 3], [N, 3.5], [E, .5]], width: 1 }
						]
					}
				};

				const points = [
					[web.awareness, web.research, web.purchase],
					[{}, {}, {}],
					[{}, community.research, {}],
					[{}, {}, {}],
					[{}, store.research, store.purchase]
				];
			%>
			<!-- the discs -->
			<g class="volume-container">
				<%
					points.forEach((row, vi) => {
						row.forEach((point, hi) => {
							const circles = point.discs && point.discs.reduce((discs, disc) => `${discs}<circle class="volume-shape volume-${disc.audience} volume-${disc.state}" r="${disc.r}" clip-path="url(#clip-${disc.state})"></circle>`, '');
							const stop = stopLocation(vi, hi);
							echo(`
								<g class="volume state-default" transform="translate(${stop.h},${stop.v})">
									${circles}
									<circle class="volume-outline" r="34"></circle>
								</g>
							`);
						});
					});
				%>
			</g>

			<!-- the lines -->
			<g class="flow-container">
				<%
					points.forEach((row, vi) => {
						row.forEach((point, hi) => {
							const stop = stopLocation(vi, hi);
							const flows = point.flows && point.flows.reduce((flows, flow) => {
								if (flow.type.match('in|off')) {
									const classes = classnames(
										`flow-drop${flow.type}`,
										'flow-type-drop',
										'flow-normal',
										'flow-shape',
										{'flow-thin': flow.width < 10}
									)
									return `${flows}<rect width="${flow.width}" height="44" x="-${flow.width/2}" y="${flow.type === 'in' ? '-44' : 0}" class="${classes}" fill="url(#gradient-drop${flow.type})"></rect>`;
								}
								const path = createPath(flow.path);
								return `${flows}
									<path class="flow-${flow.type} flow-type-directional flow-thin flow-shape" fill="none" d="${path.path}" stroke="url(#gradient-${flow.type})" stroke-width="${flow.width || 1}" stroke-dasharray="${path.length}" stroke-dashoffset="${path.length}"></path>
									<path class="flow-${flow.type} flow-type-directional flow-thin flow-shape flow-tooltip-helper" fill="none" d="${path.path}" stroke="transparent" stroke-width="6" stroke-dasharray="${path.length}" stroke-dashoffset="${path.length}"></path>
								`;
							}, '');
							echo(`
								<g class="flow flow-grid state-default" transform="translate(${stop.h},${stop.v})">
									${flows}
								</g>
							`);
						});
					});
				%>

				<!--
				<g class="flow flow-grid state-default" transform="translate(210,280.5)">
					<path class="flow-passive flow-passive--backward flow-type-directional flow-thin flow-shape" fill="none" d="m0,0 h0 q 0,0 0,0 v0.001 q 0,0 0,0 h-50 q -20,0 -20,-20 v-176 q 0,-20 20,-20 h50 q 0,0 0,0 v0.001 q 0,0 0,0 h0" stroke="url(#gradient-up)" stroke-width="1" stroke-dasharray="340.931 340.931" stroke-dashoffset="0"></path>
					<path class="flow-passive flow-passive--backward flow-type-directional flow-thin flow-tooltip-helper" fill="none" d="m0,0 h0 q 0,0 0,0 v0.001 q 0,0 0,0 h-50 q -20,0 -20,-20 v-176 q 0,-20 20,-20 h50 q 0,0 0,0 v0.001 q 0,0 0,0 h0" stroke="transparent" stroke-width="6" stroke-dasharray="340.931 340.931" stroke-dashoffset="0"></path>
				</g>
				<g class="flow flow-grid state-default" transform="translate(350,388.5)">
					<rect width="1" height="44" x="-0.5" y="0" class="flow-dropoff flow-type-drop flow-thin flow-shape" fill="url(#gradient-dropoff)"></rect>
					<rect width="6" height="44" x="-3" y="0" class="flow-dropoff flow-type-drop flow-thin flow-tooltip-helper" fill="transparent"></rect>
				</g>
				<g class="flow flow-grid state-default" transform="translate(210,280.5)">
					<path class="flow-passive flow-passive--forward flow-type-directional flow-thin flow-shape" fill="none" d="m0,0 h0 q 0,0 0,0 v0.001 q 0,0 0,0 h50 q 20,0 20,20 v68 q 0,20 -20,20 h-50 q 0,0 0,0 v0.001 q 0,0 0,0 h0" stroke="url(#gradient-down)" stroke-width="1" stroke-dasharray="232.931 232.931" stroke-dashoffset="0"></path>
					<path class="flow-passive flow-passive--forward flow-type-directional flow-thin flow-tooltip-helper" fill="none" d="m0,0 h0 q 0,0 0,0 v0.001 q 0,0 0,0 h50 q 20,0 20,20 v68 q 0,20 -20,20 h-50 q 0,0 0,0 v0.001 q 0,0 0,0 h0" stroke="transparent" stroke-width="6" stroke-dasharray="232.931 232.931" stroke-dashoffset="0"></path>
				</g>
				<g class="flow flow-grid state-default" transform="translate(210,64.5)">
					<path class="flow-passive flow-passive--forward flow-type-directional flow-thin flow-shape" fill="none" d="m0,0 h0 q 0,0 0,0 v0.001 q 0,0 0,0 h50 q 20,0 20,20 v176 q 0,20 -20,20 h-50 q 0,0 0,0 v0.001 q 0,0 0,0 h0" stroke="url(#gradient-down)" stroke-width="1" stroke-dasharray="340.931 340.931" stroke-dashoffset="0"></path>
					<path class="flow-passive flow-passive--forward flow-type-directional flow-thin flow-tooltip-helper" fill="none" d="m0,0 h0 q 0,0 0,0 v0.001 q 0,0 0,0 h50 q 20,0 20,20 v176 q 0,20 -20,20 h-50 q 0,0 0,0 v0.001 q 0,0 0,0 h0" stroke="transparent" stroke-width="6" stroke-dasharray="340.931 340.931" stroke-dashoffset="0"></path>
				</g>
				<g class="flow flow-grid state-default" transform="translate(210,64.5)">
					<path class="flow-passive flow-passive--forward flow-type-directional flow-thin flow-shape" fill="none" d="m0,0 h0 q 0,0 0,0 v0.001 q 0,0 0,0 h50 q 20,0 20,20 v284 q 0,20 -20,20 h-50 q 0,0 0,0 v0.001 q 0,0 0,0 h0" stroke="url(#gradient-down)" stroke-width="1" stroke-dasharray="448.931 448.931" stroke-dashoffset="0"></path>
					<path class="flow-passive flow-passive--forward flow-type-directional flow-thin flow-tooltip-helper" fill="none" d="m0,0 h0 q 0,0 0,0 v0.001 q 0,0 0,0 h50 q 20,0 20,20 v284 q 0,20 -20,20 h-50 q 0,0 0,0 v0.001 q 0,0 0,0 h0" stroke="transparent" stroke-width="6" stroke-dasharray="448.931 448.931" stroke-dashoffset="0"></path>
				</g>
				<g class="flow flow-grid state-default" transform="translate(350,64.5)">
					<path class="flow-backward flow-type-directional flow-thin flow-shape" fill="none" d="m0,0 h50 q 20,0 20,20 v14 q 0,20 -20,20 h-120 q 0,0 0,0 v0.001 q 0,0 0,0 h-120 q -20,0 -20,20 v122 q 0,20 20,20 h50" stroke="url(#gradient-backward)" stroke-width="1" stroke-dasharray="605.859 605.859" stroke-dashoffset="0"></path>
					<path class="flow-backward flow-type-directional flow-thin flow-tooltip-helper" fill="none" d="m0,0 h50 q 20,0 20,20 v14 q 0,20 -20,20 h-120 q 0,0 0,0 v0.001 q 0,0 0,0 h-120 q -20,0 -20,20 v122 q 0,20 20,20 h50" stroke="transparent" stroke-width="6" stroke-dasharray="605.859 605.859" stroke-dashoffset="0"></path>
				</g>
				<g class="flow flow-grid state-default" transform="translate(210,280.5)">
					<path class="flow-forward flow-type-directional flow-thin flow-shape" fill="none" d="m0,0 h50 q 20,0 20,-20 v-142 q 0,0 0,0 h0 q 0,0 0,0 v0.001 q 0,0 0,0 h0 q 0,0 0,0 v-34 q 0,-20 20,-20 h50" stroke="url(#gradient-forward)" stroke-width="1" stroke-dasharray="340.93 340.93" stroke-dashoffset="0"></path>
					<path class="flow-forward flow-type-directional flow-thin flow-tooltip-helper" fill="none" d="m0,0 h50 q 20,0 20,-20 v-142 q 0,0 0,0 h0 q 0,0 0,0 v0.001 q 0,0 0,0 h0 q 0,0 0,0 v-34 q 0,-20 20,-20 h50" stroke="transparent" stroke-width="6" stroke-dasharray="340.93 340.93" stroke-dashoffset="0"></path>
				</g>
				<g class="flow flow-grid state-default" transform="translate(210,388.5)">
					<path class="flow-backward flow-type-directional flow-thin flow-shape" fill="none" d="m0,0 h50 q 20,0 20,-20 v-14 q 0,-20 -20,-20 h-120 q 0,0 0,0 v0.001 q 0,0 0,0 h-120 q -20,0 -20,-20 v-230 q 0,-20 20,-20 h50" stroke="url(#gradient-backward)" stroke-width="1" stroke-dasharray="713.859 713.859" stroke-dashoffset="0"></path>
					<path class="flow-backward flow-type-directional flow-thin flow-tooltip-helper" fill="none" d="m0,0 h50 q 20,0 20,-20 v-14 q 0,-20 -20,-20 h-120 q 0,0 0,0 v0.001 q 0,0 0,0 h-120 q -20,0 -20,-20 v-230 q 0,-20 20,-20 h50" stroke="transparent" stroke-width="6" stroke-dasharray="713.859 713.859" stroke-dashoffset="0"></path>
				</g>
				<g class="flow flow-grid state-default" transform="translate(350,64.5)">
					<path class="flow-backward flow-type-directional flow-thin flow-shape" fill="none" d="m0,0 h50 q 20,0 20,20 v14 q 0,20 -20,20 h-120 q 0,0 0,0 v0.001 q 0,0 0,0 h-120 q -20,0 -20,-20 v-14 q 0,-20 20,-20 h50" stroke="url(#gradient-backward)" stroke-width="1" stroke-dasharray="497.859 497.859" stroke-dashoffset="0"></path>
					<path class="flow-backward flow-type-directional flow-thin flow-tooltip-helper" fill="none" d="m0,0 h50 q 20,0 20,20 v14 q 0,20 -20,20 h-120 q 0,0 0,0 v0.001 q 0,0 0,0 h-120 q -20,0 -20,-20 v-14 q 0,-20 20,-20 h50" stroke="transparent" stroke-width="6" stroke-dasharray="497.859 497.859" stroke-dashoffset="0"></path>
				</g>
				
				<g class="flow flow-grid state-default" transform="translate(350,388.5)">
					<path class="flow-backward flow-type-directional flow-thin flow-shape" fill="none" d="m0,0 h50 q 20,0 20,20 v14 q 0,20 -20,20 h-120 q 0,0 0,0 v0.001 q 0,0 0,0 h-120 q -20,0 -20,-20 v-14 q 0,-20 20,-20 h50" stroke="url(#gradient-backward)" stroke-width="1" stroke-dasharray="497.859 497.859" stroke-dashoffset="0"></path>
					<path class="flow-backward flow-type-directional flow-thin flow-tooltip-helper" fill="none" d="m0,0 h50 q 20,0 20,20 v14 q 0,20 -20,20 h-120 q 0,0 0,0 v0.001 q 0,0 0,0 h-120 q -20,0 -20,-20 v-14 q 0,-20 20,-20 h50" stroke="transparent" stroke-width="6" stroke-dasharray="497.859 497.859" stroke-dashoffset="0"></path>
				</g>
				
				<g class="flow flow-grid state-default" transform="translate(350,64.5)">
					<path class="flow-backward flow-type-directional flow-thin flow-shape" fill="none" d="m0,0 h50 q 20,0 20,20 v14 q 0,20 -20,20 h-120 q 0,0 0,0 v0.001 q 0,0 0,0 h-120 q -20,0 -20,20 v230 q 0,20 20,20 h50" stroke="url(#gradient-backward)" stroke-width="1" stroke-dasharray="713.859 713.859" stroke-dashoffset="0"></path>
					<path class="flow-backward flow-type-directional flow-thin flow-tooltip-helper" fill="none" d="m0,0 h50 q 20,0 20,20 v14 q 0,20 -20,20 h-120 q 0,0 0,0 v0.001 q 0,0 0,0 h-120 q -20,0 -20,20 v230 q 0,20 20,20 h50" stroke="transparent" stroke-width="6" stroke-dasharray="713.859 713.859" stroke-dashoffset="0"></path>
				</g>
				<g class="flow flow-grid state-default" transform="translate(210,64.5)">
					<path class="flow-forward flow-type-directional flow-thin flow-shape" fill="none" d="m0,0 h50 q 20,0 20,20 v250 q 0,0 0,0 h0 q 0,0 0,0 v0.001 q 0,0 0,0 h0 q 0,0 0,0 v34 q 0,20 20,20 h50" stroke="url(#gradient-forward)" stroke-width="1" stroke-dasharray="448.92999999999995 448.92999999999995" stroke-dashoffset="0"></path>
					<path class="flow-forward flow-type-directional flow-thin flow-tooltip-helper" fill="none" d="m0,0 h50 q 20,0 20,20 v250 q 0,0 0,0 h0 q 0,0 0,0 v0.001 q 0,0 0,0 h0 q 0,0 0,0 v34 q 0,20 20,20 h50" stroke="transparent" stroke-width="6" stroke-dasharray="448.92999999999995 448.92999999999995" stroke-dashoffset="0"></path>
				</g>
				<g class="flow flow-grid state-default" transform="translate(350,388.5)">
					<path class="flow-passive flow-passive--backward flow-type-directional flow-thin flow-shape" fill="none" d="m0,0 h0 q 0,0 0,0 v0.001 q 0,0 0,0 h-50 q -20,0 -20,-20 v-284 q 0,-20 20,-20 h50 q 0,0 0,0 v0.001 q 0,0 0,0 h0" stroke="url(#gradient-up)" stroke-width="1" stroke-dasharray="448.931 448.931" stroke-dashoffset="0"></path>
					<path class="flow-passive flow-passive--backward flow-type-directional flow-thin flow-tooltip-helper" fill="none" d="m0,0 h0 q 0,0 0,0 v0.001 q 0,0 0,0 h-50 q -20,0 -20,-20 v-284 q 0,-20 20,-20 h50 q 0,0 0,0 v0.001 q 0,0 0,0 h0" stroke="transparent" stroke-width="6" stroke-dasharray="448.931 448.931" stroke-dashoffset="0"></path>
				</g>
				<g class="flow flow-grid state-default" transform="translate(70,64.5)">
					<path class="flow-forward flow-type-directional flow-thin flow-shape" fill="none" d="m0,0 h50 q 20,0 20,20 v230 q 0,0 0,0 h0 q 0,0 0,0 v0.001 q 0,20 20,20 h100 q 20,0 20,20 v14 q 0,20 20,20 h50" stroke="url(#gradient-forward)" stroke-width="1" stroke-dasharray="573.8589999999999 573.8589999999999" stroke-dashoffset="0"></path>
					<path class="flow-forward flow-type-directional flow-thin flow-tooltip-helper" fill="none" d="m0,0 h50 q 20,0 20,20 v230 q 0,0 0,0 h0 q 0,0 0,0 v0.001 q 0,20 20,20 h100 q 20,0 20,20 v14 q 0,20 20,20 h50" stroke="transparent" stroke-width="6" stroke-dasharray="573.8589999999999 573.8589999999999" stroke-dashoffset="0"></path>
				</g>
				
				<g class="flow flow-grid state-default" transform="translate(350,388.5)">
					<path class="flow-backward flow-type-directional flow-thin flow-shape" fill="none" d="m0,0 h50 q 20,0 20,-20 v-14 q 0,-20 -20,-20 h-120 q 0,0 0,0 v0.001 q 0,0 0,0 h-120 q -20,0 -20,-20 v-14 q 0,-20 20,-20 h50" stroke="url(#gradient-backward)" stroke-width="1" stroke-dasharray="497.859 497.859" stroke-dashoffset="0"></path>
					<path class="flow-backward flow-type-directional flow-thin flow-tooltip-helper" fill="none" d="m0,0 h50 q 20,0 20,-20 v-14 q 0,-20 -20,-20 h-120 q 0,0 0,0 v0.001 q 0,0 0,0 h-120 q -20,0 -20,-20 v-14 q 0,-20 20,-20 h50" stroke="transparent" stroke-width="6" stroke-dasharray="497.859 497.859" stroke-dashoffset="0"></path>
				</g> -->
				
			</g>

			<!-- the circles on the lines -->
			<g class="node-container">
				<%
					console.log('here')

					points.forEach((row, vi) => {
						row.forEach((point, hi) => {
							const stop = stopLocation(vi, hi);
							echo(`
								<g opacity="1" class="node state-default node-focusable" transform="translate(${stop.h},${stop.v})">
									<circle r="${point.rOuter || 15}" class="tick-outer"></circle>
									<circle r="${point.r || 10}" class="tick"></circle>
								</g>
							`);
						});
					});

					console.log('here2')

				%>
			</g>
		</g>
	</g>
	<g class="graph-marks">
		<g></g>
	</g>
</svg>
<div class="grid-label-container graph-elements-html dynamic-placement" style="transform: translate(166px, 0px);">
	<div class="row-labels">
		<div class="row-group-label-container">
			<div class="journeys-label-container row-label-container dynamic-placement journeys-label-clickable" data-channel="WEB" style="opacity: 1; left: -90px; top: 64.5px;"><label class="journeys-label row-label row-label-centered"><span class="row-label-part row-icon one-glyphicon-lg one-glyphicon-laptop"></span></label></div>
		</div>
		<div class="row-group-label-container">
			<div class="journeys-label-container row-label-container dynamic-placement journeys-label-clickable" data-channel="MOBILE" style="opacity: 1; left: -90px; top: 172.5px;"><label class="journeys-label row-label row-label-centered"><span class="row-label-part row-icon one-glyphicon-lg one-glyphicon-mobile"></span></label></div>
		</div>
		<div class="row-group-label-container">
			<div class="journeys-label-container row-label-container dynamic-placement journeys-label-clickable" data-channel="SOCIAL" style="opacity: 1; left: -90px; top: 280.5px;"><label class="journeys-label row-label row-label-centered"><span class="row-label-part row-icon one-glyphicon-lg one-glyphicon-social"></span></label></div>
		</div>
		<div class="row-group-label-container">
			<div class="journeys-label-container row-label-container dynamic-placement journeys-label-clickable" data-channel="PHYSICAL" style="opacity: 1; left: -90px; top: 388.5px;"><label class="journeys-label row-label row-label-centered"><span class="row-label-part row-icon one-glyphicon-lg one-glyphicon-physical"></span></label></div>
		</div>
	</div>
	<div class="node-labels"> </div>
</div>