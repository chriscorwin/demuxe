<% if (locals.title) { %>
	<title><%= locals.title %></title>
<%
	} else {
		console.warn(`
============================================================
[WARNING] No title set!

	${locals.local.host}${locals.urlSlug} does not have a title set.
============================================================

`);

%>
	<script>
		console.warn(`[WARNING: ] <%=locals.local.host%><%=locals.urlSlug%> does not have a title set!`);
	</script>
	<title> </title>
<% } %>

<meta charset="utf-8">
<link rel="stylesheet" href="/styles/salesforce-lightning-design-system.css" />
<!-- each page automatically tries to include a css file of the same name -->
<% if (locals.siteSection && locals.siteSection !== 'magick-flows') { %>
<link rel="stylesheet" href="/styles/style.css">
<link rel="stylesheet" href="/styles/global.css">
<link rel="stylesheet" href="/styles/brand.css">
<link rel="stylesheet" href="/styles/<%=locals.siteSection%>.css">
<% } %>

<% 
if (locals.pageStylesheets) { 
	locals.pageStylesheets.forEach(function(stylesheet) { 
		echo(`<link rel="stylesheet" href="/styles/${stylesheet}">`);
	});
} 
%>

<% 
	const { trigger } = locals.sanitizedQueryParams;
%>


<%

console.group(`
============================================================
Demuxe: setting client-side javascript variables from Demuxe \`locals\`
------------------------------------------------------------
`);
// server-side log output ---^
%>


<script>
	const demoMagickFlowDirectoryName = '<%=locals.urlSlug%>';
	const locals = {};
<%
	Object.keys(locals).forEach(function(key, fileIndex) {
		/*
			This here \`Object.keys\` loop looks strange, but is helful.

			This exposes _some_ of the \`locals\` variable in the client side
			scripts.

			Magick Flows, in particular, take advantage of this capability.

			The \`locals\` object in the EJS server memory can, under some
			circumstances, contain a reference to itself, it seems.

			Although scary and worrisome the first time one encounters it, it
			actually is not a big deal, it's a thing JavaScript handles fairly
			elegantly.

			The problem comes when attempting to turn the object into a JSON string
			-- \`JSON.siteSection\` does not know how to handle this circumstance
			   without guidance.

			It will throw an error about a circular reference. ¯\\_(ツ)_/¯


			> See this Stack Exchange for more information:
			> 
			> https://stackoverflow.com/questions/10392293/stringify-convert-to-json-a-javascript-object-with-circular-reference

			Anyhoooooo...  What we're doing _here_ is iterating through the keys of
			the \`locals\` object and explicitly excluding some keys from that
			object.

			NOW: the tricky bit here is to remember that this is a mixture of server-
			side and client-side code.

			We are iterating through the server-side variable and writing out
			statements in a \`<script>\` tag in the rendered HTML.

			Don't mess it up!
		*/
		// console.group(` --> key: `, key);
		if (key != '_locals' && key != 'path' && key != 'util' && key != 'classnames' && key != 'sizeOf') {
			if(typeof locals[key] === 'object') {

				// client-side output below ---v
				// echo(`console.group('Setting variable from key \`${key}\`');`);
				echo(`locals['${key}'] = ${JSON.stringify(locals[key])};`);
				// echo(`console.groupEnd();`)
				// client-side output above ---^
			} else {
				// client-side output below ---v
				// echo(`console.group('Setting variable from key \`${key}\`');`);
				echo(`locals['${key}'] = "${locals[key]}";`);
				// echo(`console.groupEnd();`)
				// client-side output above ---^
			}
		} else {
			// console.log('NOT GONNA SAVE: key: ', key);
		}
		// console.groupEnd();
	});


	
	console.groupEnd();
	// server-side output above ---^
	// 
	// back to client-side output now ---V
%>
	console.group(`Demuxe: server-side \`locals\`:
Set: /engine/includes/global/head.ejs:134
`);
	console.dir(locals);
	console.groupEnd();
	const url = new URL( window.location.href );
	const magickFlows = locals.magickFlows;
	const urlSlug = '<%=locals.urlSlug%>';
	const triggerParam = '<%=trigger%>';
</script>


<script type="text/javascript" src="/javascripts/third-party-libraries/highcharts.min.js"></script>
<script type="text/javascript" src="/javascripts/third-party-libraries/highcharts.more.min.js"></script>
