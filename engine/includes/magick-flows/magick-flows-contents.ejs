<%

console.group(`
============================================================
Demuxe: including \`engine/includes/magick-flows/magick-flows-contents.ejs\` now...
------------------------------------------------------------
`);

const createIosNotification = (index, path, fileName) => `
	<div
		id="ios-notification--step-${index}"
		class="ios-notification ios-notification--step-${index}  magick-flows-step-asset"
	><img src="${path}${fileName}" /></div>
`;

const createDrawer = (index, fromDirection, path, fileName) => `
	<div
			id="drawer-from-${fromDirection}--step-${index}"
			class="drawer magick-flows-drawer magick-flows-drawer--from-${fromDirection} magick-flows-step-asset magick-flows-step-asset--step-${index} "
		><img src="${path}${fileName}" /></div>
`;

const createSVGStep = (index, height, width, path, fileName) => `
	<div
		class="magick-flows--main-content auto-replace is-image"
		style="height: ${height}px; width: ${width}px; display: block;"
		id="magick-flows--main-content--step-${index}"
	>
		${include(`../magick-flows-web-root${path}${fileName}`)}
	</div>
`;

const createIMGStep = (index, height, width, assetPath) => `
	<div
		class="magick-flows--main-content auto-replace is-image "
		style="height: ${height}px; width: ${width}px; background-size: cover; background-image: url(${assetPath}); display: block;"
		id="magick-flows--main-content--step-${index}"
	>
	</div>
`;

const createMp4Step = (index, assetPath) => `
	<video
		playsinline autoplay
		class="auto-replace is-video "
		id="magick-flows--main-content-wrapper--step-${index}"
	>
		<source
			class="magick-flows--main-content auto-replace "
			id="magick-flows--main-content--step-${index}"
			src="${assetPath}"
			type="video/mp4"
		>
		Your browser does not support the video tag.
	</video>
`;

const cleanNote = note => note.replace(/-/g, ' ');
const createHTMLClickHints = (index, notes) => `
	<div
		id="magick-flows-click-hints--step-${index}"
		class="click-hints magick-flows-click-hints magick-flows-click-hints--from-bottom magick-flows-click-hints--step-${index} "
	>
		${notes.reduce((notes, note, i) => `
			<p data="Click hint number ${i} (${notes.length})" class="${(i === notes.length - 1) ? 'slds-p-bottom_none' : 'slds-p-bottom_medium'}">${cleanNote(note)}.</p>
		`, '')}
	</div>
`;

const createHeadsUpDisplay = (node, thisParagraphClassName = 'slds-p-bottom_medium') => `
	<div
		id="magick-flows-debug-hints--step-${node.stepsIndex}"
		class="debug-hints magick-flows-debug-hints magick-flows-debug-hints--step-${node.stepsIndex} "
	>
		<p class="${thisParagraphClassName}">Step: #${node.stepsIndex}</p>
		<p  class="${thisParagraphClassName}">Sorter: ${node.sorter}</p>
		<p  class="${thisParagraphClassName}">ID: ${node.id}</p>
		<p  class="${thisParagraphClassName}">Data: <code>${node.data}</code></p>
	</div>
`;


const createEscapeHatch = (index, width, height, slug) => `
	<iframe id="magick-flows-iframe--${index}"
			title="Inline Frame Example"
			width="${width}"
			height="${height}"
			src="/${slug}">
	</iframe>
`


	let thisMagickFlowConfig = locals.magickFlows[locals.magickFlows.urlSlugsMapToFlowDirectories[locals.urlSlug]];
	let preLoadImages = '';
_%>
<script type="text/javascript">
	const thisMagickFlowConfig =<%- JSON.stringify(thisMagickFlowConfig)%>;
	console.group('[ includes/magick-flows/magick-flows-contents.ejs:14 ] thisMagickFlowConfig:');
	console.dir(thisMagickFlowConfig);


	var clicks = parseInt( window.location.hash.replace( '#', '' ) ) || 0;

	if ( clicks >= thisMagickFlowConfig.numberOfSteps ) {
		clicks = 0;
	}

	var nextClick = clicks + 1;
	if ( nextClick >= thisMagickFlowConfig.numberOfSteps ) {
		nextClick = 0
	}

	var previousClick = clicks - 1;
	if ( previousClick <= 0 ) {
		previousClick = thisMagickFlowConfig.numberOfSteps
	}



	console.groupEnd();
</script>
<%
	let showMetaDataMissingError = true;
	let thisMagickFlowStepMetaData = thisMagickFlowConfig.stepMetaData;

	const webRootPath = `/${locals.magickFlows.directoryName}/${locals.magickFlows.urlSlugsMapToFlowDirectories[locals.urlSlug]}`;
	const mainContentPath = `${webRootPath}/main/`;
	const assetsContentPath = `${webRootPath}/assets/`;



	/**
	 * Conserve aspect ratio of the original region. Useful when shrinking/enlarging
	 * images to fit into a certain area.
	 *
	 * @param {Number} srcWidth width of source image
	 * @param {Number} srcHeight height of source image
	 * @param {Number} maxWidth maximum available width
	 * @param {Number} maxHeight maximum available height
	 * @return {Object} { width, height }
	 */
	function calculateAspectRatioFit(srcWidth, srcHeight, maxWidth, maxHeight) {

		let ratio = Math.min(maxWidth / srcWidth, maxHeight / srcHeight);
		let toReturn = { width: Math.ceil((srcWidth * ratio) || 0), height: Math.ceil((srcHeight * ratio) || 0) };
		return toReturn;
	 }


	function testForEscapeHatch(node) {
		return node.includes('is-escape-hatch');
	}

	let maxWidth = thisMagickFlowConfig.templateSizingFileDimensions.width || 1280;
	let maxHeight = thisMagickFlowConfig.templateSizingFileDimensions.height || 720;


	thisMagickFlowStepMetaData.forEach(function(node, nodeIndex) {
		const mainContentWebRootUrl = `${mainContentPath}${node.fileName}`;
		const clickHintsAssetWebRootUrl = `${assetsContentPath}${node.id}___click-hint.png`;
		let showHeader = node.hasStickyHeader === true || false;
		const showFooter = node.hasStickyFooter === true || false;
		const nodeData = node.data || ['unset'];
		const nodeNotes = node.notes;
		let showHeaderPaddingOnMain = false;
		let headerPaddingforMain = 0;


		let headerWebRootUrl = `${assetsContentPath}${node.stickyHeaderFileName}`;
		const footerWebRootUrl = `${assetsContentPath}${node.stickyFooterFileName}`;



		let srcWidthHeader = node.stickyHeaderWidth || 0;
		let srcHeightHeader = node.stickyHeaderHeight || 0;
		let srcWidthFooter = node.stickyFooterWidth || 0;
		let srcHeightFooter = node.stickyFooterHeight || 0;
		let renderSizeHeader = calculateAspectRatioFit(srcWidthHeader, srcHeightHeader, maxWidth, maxHeight);
		let renderSizeFooter = calculateAspectRatioFit(srcWidthFooter, srcHeightFooter, maxWidth, maxHeight);
		let renderSizeMainContent = calculateAspectRatioFit(node.dimensions.width, node.dimensions.height, maxWidth, node.dimensions.height);
		let mainContentScrollableAreaHeight = ((maxHeight - (renderSizeHeader.height + renderSizeFooter.height)) + 0);

		headerPaddingforMain = renderSizeHeader['height'];


		if (renderSizeMainContent.height < mainContentScrollableAreaHeight) {
			mainContentScrollableAreaHeight = renderSizeMainContent.height;
		}

		const isEjs = node.dimensions.type === 'ejs';
		const isPng = node.dimensions.type === 'png';
		const isSvg = node.dimensions.type === 'svg';
		const isMp4 = node.dimensions.type === 'mp4';
		const isGif = node.dimensions.type === 'gif';
		const isJpeg = node.dimensions.type === 'jpg';
		let thisMagickFlowsSlideClassnames = {
			'magick-flows-step': true
		};



		let hasEscapeHatch = nodeData.some(testForEscapeHatch);
		let indexOfEscapeHatch = nodeData.findIndex(testForEscapeHatch);
		let newUrlSlugForEscapeHatch = '';







		if ( nodeData.find(k => k=='is-own-header') === 'is-own-header') {
			thisMagickFlowsSlideClassnames['is-own-header'] = true;
			nodeData.forEach(function(dataNode, dataNodeIndex){
				if (dataNode !== 'is-own-header') {
					if (dataNode.startsWith('own-header-height--')) {
						renderSizeHeader['height'] = dataNode.split('--')[dataNode.split('--').length - 1];
						renderSizeHeader['width'] = renderSizeMainContent.width;
						thisMagickFlowsSlideClassnames[`own-header-height--${renderSizeHeader['height']}`] = true;
					}
				}
			});
			showHeader = true;
			showHeaderPaddingOnMain = true;
			headerPaddingforMain = 0;
			headerWebRootUrl = mainContentWebRootUrl;
		}

%>







<!--




#<%= nodeIndex %>======================================

<%= `Sorter: ${node.sorter}` %>
<%= `Step Identifier: ${node.id}` %>
<%= `${node.sorter}___${node.id}` %>
--------------------------------------
<%= node.notes.reduce((comments, comment) => `${comments} ${cleanNote(comment)}`, '') %>
-->
<div
	class="slds-grid slds-grid_vertical magick-flows--step-<%=nodeIndex%>  <%= classnames(thisMagickFlowsSlideClassnames);%> <%= classnames(node.data);%>"
	data-step="<%=nodeIndex%>"
	id="magick-flows--step-<%=nodeIndex%>"
>
<%_ if (showHeader) { _%>
	<header class="slds-col magick-flows-stickey-header_container" style="background-image: url(<%=headerWebRootUrl%>); display: block; height: <%=renderSizeHeader.height%>px; width: <%=renderSizeHeader.width%>px; background-size: cover; background-color: transparent; z-index: 1;"></header>
<%_ } _%>

<%
		echo(`
			<div
				class="slds-col slds-scrollable"
				style="height: ${mainContentScrollableAreaHeight}px; margin-bottom: ${renderSizeFooter.height}px; margin-top: ${headerPaddingforMain}px;"
			>
				${hasEscapeHatch === true ? createEscapeHatch(node.stepsIndex, renderSizeMainContent.width, mainContentScrollableAreaHeight, decodeURIComponent(nodeData[indexOfEscapeHatch].split('--')[1])) : ''}
		`);

			if (isSvg) {
				echo(createSVGStep(nodeIndex, renderSizeMainContent.height, renderSizeMainContent.width, mainContentPath, node.fileName));
			} else if (isPng || isGif || isJpeg) {
				echo(createIMGStep(nodeIndex, renderSizeMainContent.height, renderSizeMainContent.width, mainContentWebRootUrl));


				preLoadImages += `<img
					class=""
					src="${mainContentWebRootUrl}"
					height="0"
					width="0"
					>
				`;
			} else if (isEjs) {
				echo(`
					<div class="slds-scrollable">
						${include(mainContentWebRootUrl)}
					</div>
				`);
			} else if (isMp4) {
				echo(createMp4Step(nodeIndex, mainContentWebRootUrl));
			}

		echo(`</div>`)
%>


<%_ if (showFooter) { _%>
	<footer class="magick-flows-stickey-footer_container slds-col">
		<img
			id="sticky-footer--step-<%=nodeIndex%>"
			class="sticky-footer "
			src="<%=footerWebRootUrl%>"
		/>
	</footer>
<%_ } _%>



	<%
		node.showDrawerFromTop === true && echo(createDrawer(node.stepsIndex, 'top', assetsContentPath, node.drawerFromTopFileName));
		node.showDrawerFromRight === true && echo(createDrawer(node.stepsIndex, 'right', assetsContentPath, node.drawerFromRightFileName));
		node.showDrawerFromBottom === true && echo(createDrawer(node.stepsIndex, 'bottom', assetsContentPath, node.drawerFromBottomFileName));
		node.showDrawerFromLeft === true && echo(createDrawer(node.stepsIndex, 'left', assetsContentPath, node.drawerFromLeftFileName));
		node.showIosNotification === true && echo(createIosNotification(node.stepsIndex, assetsContentPath, node.iosNotificationFileName));

		const hasClickHints = node.notes.length > 0 && !(node.notes.length === 1 && node.notes[0] === 'unset');
		hasClickHints && echo(createHTMLClickHints(node.stepsIndex, node.notes));
		echo(createHeadsUpDisplay(node));

	%>

</div>


<% }); %>





<div class="preload-images">
<%- preLoadImages %>
</div>



<%
console.log(`...end \`engine/includes/magick-flows/magick-flows-contents.ejs\`
------------------------------------------------------------
`);
console.groupEnd();
%>
