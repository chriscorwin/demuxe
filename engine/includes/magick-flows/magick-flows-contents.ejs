<%
console.group(`
============================================================
Demuxe: including \`engine/includes/magick-flows/magick-flows-contents.ejs\` now...
------------------------------------------------------------
`);

	let thisMagickFlowConfig = locals.magickFlows[locals.magickFlows.urlSlugsMapToFlowDirectories[locals.urlSlug]];
	let preLoadImages = '';
_%>
<script type="text/javascript">
	const thisMagickFlowConfig =<%- JSON.stringify(thisMagickFlowConfig)%>;
	console.group('[ includes/magick-flows/magick-flows-contents.ejs:14 ] thisMagickFlowConfig:');
	console.dir(thisMagickFlowConfig);


	var clicks = parseInt( window.location.hash.replace( '#', '' ) ) || 0;

	if ( clicks >= thisMagickFlowConfig.numberOfSteps ) {
		clicks = 0;
	}

	var nextClick = clicks + 1;
	if ( nextClick >= thisMagickFlowConfig.numberOfSteps ) {
		nextClick = 0
	}

	var previousClick = clicks - 1;
	if ( previousClick <= 0 ) {
		previousClick = thisMagickFlowConfig.numberOfSteps
	}



	console.groupEnd();
</script>
<%
	let showMetaDataMissingError = true;
	let thisMagickFlowMetaData = thisMagickFlowConfig.metaData;

	const webRootPath = `/${locals.magickFlows.directoryName}/${locals.magickFlows.urlSlugsMapToFlowDirectories[locals.urlSlug]}`;
	const mainContentPath = `${webRootPath}/main/`;
	const assetsContentPath = `${webRootPath}/assets/`;



	/**
	 * Conserve aspect ratio of the original region. Useful when shrinking/enlarging
	 * images to fit into a certain area.
	 *
	 * @param {Number} srcWidth width of source image
	 * @param {Number} srcHeight height of source image
	 * @param {Number} maxWidth maximum available width
	 * @param {Number} maxHeight maximum available height
	 * @return {Object} { width, height }
	 */
	function calculateAspectRatioFit(srcWidth, srcHeight, maxWidth, maxHeight) {

		let ratio = Math.min(maxWidth / srcWidth, maxHeight / srcHeight);
		let toReturn = { width: Math.floor((srcWidth * ratio) || 0), height: Math.floor((srcHeight * ratio) || 0) };
		return toReturn;
	 }


	function testForEscapeHatch(node) {
		return node.includes('is-escape-hatch');
	}

	let maxWidth = thisMagickFlowConfig.templateSizingFileDimensions.width || 1280;
	let maxHeight = thisMagickFlowConfig.templateSizingFileDimensions.height || 720;


	thisMagickFlowMetaData.forEach(function(node, nodeIndex) {


		const mainContentWebRootUrl = `${mainContentPath}${node.fileName}`;
		const clickHintsAssetWebRootUrl = `${assetsContentPath}${node.id}___click-hint.png`;
		let showHeader = node.hasStickyHeader === true || false;
		const showFooter = node.hasStickyFooter === true || false;
		const nodeData = node.data || ['unset'];
		const nodeNotes = node.notes;
		let showHeaderPaddingOnMain = false;
		let headerPaddingforMain = 0;


		let headerWebRootUrl = `${assetsContentPath}${node.stickyHeaderFileName}`;
		const footerWebRootUrl = `${assetsContentPath}${node.stickyFooterFileName}`;



		let srcWidthHeader = node.stickyHeaderWidth || 0;
		let srcHeightHeader = node.stickyHeaderHeight || 0;
		let srcWidthFooter = node.stickyFooterWidth || 0;
		let srcHeightFooter = node.stickyFooterHeight || 0;
		let renderSizeHeader = calculateAspectRatioFit(srcWidthHeader, srcHeightHeader, maxWidth, maxHeight);
		let renderSizeFooter = calculateAspectRatioFit(srcWidthFooter, srcHeightFooter, maxWidth, maxHeight);
		let renderSizeMainContent = calculateAspectRatioFit(node.dimensions.width, node.dimensions.height, maxWidth, node.dimensions.height);
		let mainContentScrollableAreaHeight = ((maxHeight - (renderSizeHeader.height + renderSizeFooter.height)) + 0);

		headerPaddingforMain = renderSizeHeader['height'];


		if (renderSizeMainContent.height < mainContentScrollableAreaHeight) {
			mainContentScrollableAreaHeight = renderSizeMainContent.height;
		}

		const isEjs = node.dimensions.type === 'ejs';
		const isPng = node.dimensions.type === 'png';
		const isSvg = node.dimensions.type === 'svg';
		const isMp4 = node.dimensions.type === 'mp4';
		const isGif = node.dimensions.type === 'gif';
		const isJpeg = node.dimensions.type === 'jpg';
		let thisMagickFlowsSlideClassnames = {
			'magick-flows-step': true
		};



		let hasEscapeHatch = nodeData.some(testForEscapeHatch);
		let indexOfEscapeHatch = nodeData.findIndex(testForEscapeHatch);
		let newUrlSlugForEscapeHatch = '';
		let escapeHatchContentHtmlOut = '';
		if ( hasEscapeHatch === true ) {
			newUrlSlugForEscapeHatch = decodeURIComponent(nodeData[indexOfEscapeHatch].split('--')[1]);
			escapeHatchContentHtmlOut += `
<iframe id="magick-flows-iframe--${node.stepsIndex}"
    title="Inline Frame Example"
    width="${renderSizeMainContent.width}"
    height="${mainContentScrollableAreaHeight}"
    src="/${newUrlSlugForEscapeHatch}">
</iframe>
`
		}






		if ( nodeData.find(k => k=='is-own-header') === 'is-own-header') {
			thisMagickFlowsSlideClassnames['is-own-header'] = true;
			nodeData.forEach(function(dataNode, dataNodeIndex){
				if (dataNode !== 'is-own-header') {
					if (dataNode.startsWith('own-header-height--')) {
						renderSizeHeader['height'] = dataNode.split('--')[dataNode.split('--').length - 1];
						renderSizeHeader['width'] = renderSizeMainContent.width;
						thisMagickFlowsSlideClassnames[`own-header-height--${renderSizeHeader['height']}`] = true;
					}
				}
			});
			showHeader = true;
			showHeaderPaddingOnMain = true;
			headerPaddingforMain = 0;
			headerWebRootUrl = mainContentWebRootUrl;
		}

		preLoadImages += `<img
			class=""
			src="${mainContentWebRootUrl}"
			height="0"
			width="0"
			>
		`;



		let iosNotificationHtmlOut = '';
		const showIosNotification = node.showIosNotification === true || false;
		if ( showIosNotification === true ) {
			const iosNotificationWebRootUrl = `${assetsContentPath}${node.iosNotificationFileName}`;
			iosNotificationHtmlOut = `
				<div
					id="ios-notification--step-${node.stepsIndex}"
					class="ios-notification ios-notification--step-${node.stepsIndex}  magick-flows-step-asset"
				><img src="${iosNotificationWebRootUrl}" /></div>
			`
		}




		let drawerFromTopHtmlOut = '';
		const showDrawerFromTop = node.showDrawerFromTop === true || false;
		if ( showDrawerFromTop === true ) {
			const drawerFromTopWebRootUrl = `${assetsContentPath}${node.drawerFromTopFileName}`;
			drawerFromTopHtmlOut = `
				<div
					id="drawer-from-top--step-${node.stepsIndex}"
					class="drawer magick-flows-drawer magick-flows-drawer--from-top magick-flows-step-asset magick-flows-step-asset--step-${node.stepsIndex} "
				><img src="${drawerFromTopWebRootUrl}" /></div>
			`
		}



		let drawerFromLeftHtmlOut = '';
		const showDrawerFromLeft = node.showDrawerFromLeft === true || false;
		if ( showDrawerFromLeft === true ) {
			const drawerFromLeftWebRootUrl = `${assetsContentPath}${node.drawerFromLeftFileName}`;
			drawerFromLeftHtmlOut = `
				<div
					id="drawer-from-left--step-${node.stepsIndex}"
					class="drawer magick-flows-drawer magick-flows-drawer--from-left magick-flows-step-asset magick-flows-step-asset--step-${node.stepsIndex} "
				><img src="${drawerFromLeftWebRootUrl}" /></div>
			`
		}


		let drawerFromBottomHtmlOut = '';
		const showDrawerFromBottom = node.showDrawerFromBottom === true || false;
		if ( showDrawerFromBottom === true ) {
			const drawerFromBottomWebRootUrl = `${assetsContentPath}${node.drawerFromBottomFileName}`;
			drawerFromBottomHtmlOut = `
				<div
					id="drawer-from-bottom--step-${node.stepsIndex}"
					class="drawer magick-flows-drawer magick-flows-drawer--from-bottom magick-flows-step-asset magick-flows-step-asset--step-${node.stepsIndex} "
				><img src="${drawerFromBottomWebRootUrl}" /></div>
			`
		}


		let drawerFromRightHtmlOut = '';
		const showDrawerFromRight = node.showDrawerFromRight === true || false;
		if ( showDrawerFromRight === true ) {
			const drawerFromRightWebRootUrl = `${assetsContentPath}${node.drawerFromRightFileName}`;
			drawerFromRightHtmlOut = `
				<div
					id="drawer-from-right--step-${node.stepsIndex}"
					class="drawer magick-flows-drawer magick-flows-drawer--from-right magick-flows-step-asset magick-flows-step-asset--step-${node.stepsIndex} "
				><img src="${drawerFromRightWebRootUrl}" /></div>
			`
		}


		let clickHintsHtmlOut = '';
		let htmlCommentsHtmlOut = '';
		let hasNotes = node.notes.length > 0 ? true : false;
		if ( node.notes.length === 1 && node.notes[0] === 'unset' ) {
			hasNotes = false;
		}
		if ( hasNotes === true ) {


			clickHintsHtmlOut += `
				<div
					id="magick-flows-click-hints--step-${node.stepsIndex}"
					class="click-hints magick-flows-click-hints magick-flows-click-hints--from-bottom magick-flows-click-hints--step-${node.stepsIndex} "
				>
			`
			let thisParagraphClassName = `slds-p-bottom_medium`;
			node.notes.forEach((note, noteIndex) => {
				if (noteIndex === node.notes.length - 1) {
					thisParagraphClassName = `slds-p-bottom_none`
				}
				note = note.replace(/-/g, ' ');

				clickHintsHtmlOut += `<p data="Click hint number ${noteIndex} (${node.notes.length})" class="${thisParagraphClassName}">${note}.</p>`
				htmlCommentsHtmlOut += `${note}
`;
			});


			clickHintsHtmlOut += `
				</div>
			`
		}
%>







<!--




#<%= nodeIndex %>======================================

<%= node.id %>
--------------------------------------
<%= htmlCommentsHtmlOut %>
-->
<div
	class="slds-grid slds-grid_vertical magick-flows--step-<%=nodeIndex%>  <%= classnames(thisMagickFlowsSlideClassnames);%>"
	data-step="<%=nodeIndex%>"
	id="magick-flows--step-<%=nodeIndex%>"
>
<%_ if (showHeader) { _%>
	<header class="slds-col magick-flows-stickey-header_container" style="background-image: url(<%=headerWebRootUrl%>); display: block; height: <%=renderSizeHeader.height%>px; width: <%=renderSizeHeader.width%>px; background-size: cover; background-color: transparent; z-index: 1;"></header>
<%_ } _%>

<%

		echo(`
			<div
				class="slds-col slds-scrollable"
				style="height: ${mainContentScrollableAreaHeight}px; margin-bottom: ${renderSizeFooter.height}px; margin-top: ${headerPaddingforMain}px;"
			>
		`);

		if (hasEscapeHatch === true) {
			echo(`${escapeHatchContentHtmlOut}`);
		}
		if (isPng || isSvg || isGif || isJpeg) {
			echo(`
				<div
					class="magick-flows--main-content auto-replace is-image "
					style="height: ${renderSizeMainContent.height}px; width: ${renderSizeMainContent.width}px; background-size: cover; background-image: url(${mainContentWebRootUrl}); display: block;"
					id="magick-flows--main-content--step-${nodeIndex}"
				>
				</div>
			`);
		} else if (isEjs) {
			echo(`
				<div
					class="slds-scrollable"
				>
			`);
				echo(include(mainContentWebRootUrl))
			echo(`
				</div>
			`);
		} else if (isMp4) {
			echo(`
				<video
					playsinline autoplay
					class="auto-replace is-video "
					id="magick-flows--main-content-wrapper--step-${nodeIndex}"
				>
					<source
						class="magick-flows--main-content auto-replace "
						id="magick-flows--main-content--step-${nodeIndex}"
						src="${mainContentWebRootUrl}"
						type="video/mp4"
					>
					Your browser does not support the video tag.
				</video>
			`);
		}



		echo(`</div>`)



%>




<%_ if (showFooter) { _%>
	<footer class="magick-flows-stickey-footer_container slds-col">
		<img
			id="sticky-footer--step-<%=nodeIndex%>"
			class="sticky-footer "
			src="<%=footerWebRootUrl%>"
		/>
	</footer>
<%_ } _%>
	<%- drawerFromTopHtmlOut %>
	<%- drawerFromRightHtmlOut %>
	<%- drawerFromBottomHtmlOut %>
	<%- drawerFromLeftHtmlOut %>
	<%- iosNotificationHtmlOut %>

	<%- clickHintsHtmlOut %>

</div>


<% }); %>





<div class="preload-images">
<%- preLoadImages %>
</div>

<%
console.log(`...end \`engine/includes/magick-flows/magick-flows-contents.ejs\`
------------------------------------------------------------
`);
console.groupEnd();
%>