<!DOCTYPE html>
<html>

<head>
    <title>
        Index
    </title>
    <link rel='stylesheet' href='/styles/salesforce-lightning-design-system.min.css' />
    <link rel='stylesheet' href='/styles/style.css' />
    <link rel='stylesheet' href='/stylesheets/non-existent.css' />
    <link rel='stylesheet' href='/stylesheets/brand.css' />


    <% if (locals) { %>
        <script>
      <% try { JSON.stringify(locals) %>
          const clientSideLocals = <%- JSON.stringify(locals) %>;
          console.group('Locals');
          console.dir(<%- JSON.stringify(locals) %>);
          console.groupEnd();
      <% } catch (e) { %>
          const clientSideLocals = {};
          console.log('ERROR STRINGIFYING LOCALS');
          console.log('<%= e %>');
      <% } %>
        </script>
    <% } else { %>
      <script>
        const clientSideLocals = {};
        console.log('No locals provided, for some reason...');
      </script>
    <% } %>
</head>

<body <%= locals.sanitizedQueryParams.debug==='true' ? 'class=has-debug' : '' %>>

  <section id="main-container" class="slds-container_medium slds-p-around_large">


    <section class="slds-m-bottom_large">
      <h1 class="slds-text-heading_large">Index</h1>
      <img src="/images/thing.png">
      <p>
        If you are reading this, your demo app server is up and running, congratulations!
        <br>Now go add your own `index.ejs` file to `/demo-overrides/`, or specify a productTemplate (if you specified a productTemplate, it probably would have an `index.ejs` file, and you wouldn't be seeing this).
        <br><i>This</i> file lives in `/engine/` and is part of the Demuxe engine itself. It should not be edited.
      </p>
      <p>Demo settings live in `/config/`. Default settings go in `config.json` and should default to production values. Your config settings are currently set to:
        <ul>
          <li>productTemplate: <%= locals.productTemplate %></li>
          <li>brandTheme: <%= locals.brandTheme %></li>
          <li>demoName: <%= locals.demoName %></li>
          <li>demoVersion: <%= locals.demoVersion %></li>
          <li>env: <%= locals.env %></li>
        </ul>
      </p>
    </section>

    <section class="slds-m-bottom_large">


      <heading class="slds-text-heading_medium">You can use query parameters!</heading>
      <p>Query parameters are available in the global JS
          <var>locals</var> object, like this:
      </p>
      <div class="slds-m-vertical_medium">
        <code>&lt;%= locals.sanitizedQueryParams.foo %&gt;</code>
      </div>
      <p>While <a href="http://ejs.co/#docs">EJS Documentation example</a> tells you you can access them like this: <code>&lt;%= foo %&gt;</code>, <em>don't</em> do that; if the parameter is undefined the page will explode.</p>
    </section>

    <section class="slds-m-bottom_large">

      <heading class="slds-text-heading_medium">Foo</heading>
      <p>Value of <code>?foo=</code>
          <var>
              <%= locals.sanitizedQueryParams.foo %>
          </var>.
      </p>

      <% if (locals.sanitizedQueryParams.foo === 'bar') { %>
      <p><a href="/">Click here to <em>un-set</em> <code>foo</code></a>.</p>
      <% } else { %>
      <p><a href="?foo=bar">Click here to set the value of <code>?foo</code> to be <var>bar</var></a>.</p>
      <% } %>
    </section>

    <section class="slds-m-bottom_large">
      <heading class="slds-text-heading_medium">Debug</heading>
      <p>Value of <code>?debug=</code>
          <var>
              <%= locals.sanitizedQueryParams.debug %>
          </var>.
      </p>
      <% if (locals.sanitizedQueryParams.debug === 'true') { %>
      <p><a href="/">Click here to <em>un-set</em> <code>debug</code></a>.</p>
      <% } else { %>
      <p><a href="?debug=true">Click here to set the value of <code>?debug</code> to be <var>true</var></a>.</p>
      <% } %>
    </section>

    <section class="slds-m-bottom_large">
      <heading class="slds-text-heading_medium">Testing server-side includes</heading>

      <p>You can include chunks of HTML in your <code>.ejs</code> files like:</p>

      <div class="slds-m-vertical_medium">
		<code><%%- include('includes/without-extra-dots') %></span></code>
		<br><code><%%- include('includes/with.extra.dots.ejs') %></span></code>
      </div>

      <p>If you use any kind of HTML prettifyer in your code, it is reccomended to wrap your server-side include statement in a seemingly useless <code>&lt;span/&gt;</code> tag, so that it will not throw off the indentation. Annoying, but... whatever. If you put the class name <var>is-ssi-block</var> on it, it gets a special feature. :D</p>

	  <span class="is-ssi-block"><%- include('includes/test-include') %></span>
	  <span class="is-ssi-block"><%- include('includes/test.include.ejs') %></span>
    </section>



  </section>
    <script src="/javascripts/queryParams.js"></script>
    <script src="/javascripts/brand.js"></script>
    <script src="/javascripts/non-existent.js"></script>
    <script type="text/javascript">
    queryParams.add('bob', 'villa');
    queryParams.add('bob', 'hope');
    queryParams.remove('bob');

    if (location.host === 'localhost:3000') {
        document.write('<script src="http://' + (location.host || 'localhost')
            .split(':')[0] + ':35729/livereload.js?snipver=1"></' + 'script>');
    }
    </script>
</body>

</html>
